<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h2 id="自定义环节">自定义环节</h2>
<h3 id="使用主题">使用主题</h3>
<p>笔者使用的是 nexT 主题</p>
<p>我们使用包安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add hexo-theme-next</span><br></pre></td></tr></table></figure>
<p>安装完成后，将 node_modules/hexo-theme-next/_config.yml 复制一份出来，然后将文件名修改成 _config.next.yml，放置在 blog 项目的根目录。</p>
<p>后面我们就可以自己对主题配置文件进行自定义修改了，详细参数的用途见官网文档。</p>
<span id="more"></span>
<h3 id="使用注音语法">使用注音语法</h3>
<h4 id="一、更换-Hexo-默认-Markdown-Renderer">一、更换 Hexo 默认 Markdown Renderer</h4>
<p>1.删除默认 markdown 渲染器<br>
2.下载另一个 markdown 渲染器<br>
3.下载 ruby 注音插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn remove hexo-renderer-marked</span><br><span class="line">yarn add hexo-renderer-markdown-it</span><br><span class="line">yarn add markdown-it-ruby</span><br></pre></td></tr></table></figure>
<h4 id="二、修改-config-yml">二、修改 _config.yml</h4>
<p>在任何根位置填写：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ruby</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-nexT-主题的全局样式">配置 nexT 主题的全局样式</h3>
<h4 id="前置条件">前置条件</h4>
<p>在修改主题配色之前，我们先明确 Hexo 主题的安装方式。</p>
<p>Hexo 的主题有2种安装方式：</p>
<blockquote>
<p>1、在当前 blog 项目使用包安装。</p>
<p>2、github 下载代码然后解压到 themes 文件夹。</p>
</blockquote>
<p>以下教程只适用于包安装的玩家,并且 nexT 的版本应在 <code>&quot;hexo-theme-next&quot;: &quot;^8.6.1&quot;</code> 以上。</p>
<h4 id="一、了解-nexT-的主题配色定义的位置">一、了解 nexT 的主题配色定义的位置</h4>
<p>要修改 nexT 主题配色，先要知道主题的配色是在哪里被定义的，我们从 node_modules 里 nexT 的安装包中找起。</p>
<p>找到了，在这个地方 :smirk:</p>
<blockquote>
<p>node_modules/hexo-theme-next/source/css/_variables/base.styl</p>
</blockquote>
<p>在这里我们可以看到色调的定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$whitesmoke   = #f5f5f5;</span><br><span class="line">$gainsboro    = #eee;</span><br><span class="line">$grey-lighter = #ddd;</span><br><span class="line">$grey-light   = #ccc;</span><br><span class="line">$grey         = #bbb;</span><br><span class="line">$grey-dark    = #<span class="number">999</span>;</span><br><span class="line">$grey-dim     = #<span class="number">666</span>;</span><br><span class="line">$black-light  = #<span class="number">555</span>;</span><br><span class="line">$black-dim    = #<span class="number">333</span>;</span><br><span class="line">$black-deep   = #<span class="number">222</span>;</span><br><span class="line">$red          = #ff2a2a;</span><br><span class="line">$blue-bright  = #87daff;</span><br><span class="line">$blue         = #0684bd;</span><br><span class="line">$blue-deep    = #262a30;</span><br><span class="line">$orange       = #fc6423;</span><br></pre></td></tr></table></figure>
<p>还有主题配项，和它们对应的色调。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Global border color.</span></span><br><span class="line">$border-color                 = $grey-light;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Background color for &lt;body&gt;</span></span><br><span class="line">$body-bg-color                = white;</span><br><span class="line">$body-bg-color-dark           = #<span class="number">282828</span>;</span><br><span class="line">$content-bg-color             = white;</span><br><span class="line">$content-bg-color-dark        = $black-dim;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Selection</span></span><br><span class="line">$selection-bg                 = $blue-deep;</span><br><span class="line">$selection-color              = $gainsboro;</span><br></pre></td></tr></table></figure>
<p>接下来我们打开 _config.next.yml 文件 在 custom_file_path 子项中将 variable 开启。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.njk</span><br><span class="line">  #header: source/_data/header.njk</span><br><span class="line">  #sidebar: source/_data/sidebar.njk</span><br><span class="line">  #postMeta: source/_data/post-meta.njk</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.njk</span><br><span class="line">  #footer: source/_data/footer.njk</span><br><span class="line">  #bodyEnd: source/_data/body-end.njk</span><br><span class="line">  <span class="attr">variable</span>: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  <span class="attr">style</span>: source/_data/styles.styl</span><br></pre></td></tr></table></figure>
<h4 id="二、自定义调色数据">二、自定义调色数据</h4>
<p>在 _config.next.yml 文件中任意根位置写入调色数据。</p>
<p>调色数据中的 key 对应着主题配项，value 对应着颜色的16进制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 自定义主题色</span><br><span class="line"><span class="attr">diy_css</span>:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  <span class="attr">global</span>:</span><br><span class="line">    link-color: <span class="string">&#x27;#0593d3&#x27;</span></span><br><span class="line">    link-color-dark: <span class="string">&#x27;#0593d3&#x27;</span></span><br><span class="line">    link-hover-color: <span class="string">&#x27;#0593d3&#x27;</span></span><br><span class="line">    link-hover-color-dark: <span class="string">&#x27;#0593d3&#x27;</span></span><br><span class="line">    link-color-light: <span class="string">&#x27;#0593d3&#x27;</span></span><br><span class="line">    link-decoration-color: <span class="string">&#x27;#0593d3&#x27;</span></span><br><span class="line">    menu-item-bg-color-dark: <span class="string">&#x27;#0593d3&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="三、读取自定义调色数据">三、读取自定义调色数据</h4>
<p>下面的代码定义一个读取配置文件调色数据的函数。</p>
<p>该函数期望接收一个配项名，然后通过 hexo-config 函数从配置文件中获取配项对应的颜色代码，然后用它替换掉主题配项中的颜色。如果找不到对应，则使用第二个参数设置默认颜色。</p>
<p>我们在刚刚开启的 custom_file_path -&gt; variable 对应路径下新建 variables.styl 文件，复制以下内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件中的颜色信息</span></span><br><span class="line"><span class="function"><span class="title">get_color_info</span>(<span class="params">key, default_color</span>)</span> &#123;</span><br><span class="line">  $color_info = hexo-config(<span class="string">&#x27;diy_css.global.&#x27;</span> + key);  <span class="comment">// 读取颜色配置，如#770</span></span><br><span class="line">  <span class="keyword">return</span> (hexo-config(<span class="string">&#x27;diy_css.enable&#x27;</span>) and $color_info is a <span class="string">&#x27;string&#x27;</span>) ? unquote($color_info) : default_color;  <span class="comment">// 判断是否使用自定义，然后不为空，则读取，否则默认</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Global link color.</span></span><br><span class="line">$link-color                   = get_color_info(<span class="string">&#x27;link-color&#x27;</span>,$black-light);</span><br><span class="line">$link-color-dark              = get_color_info(<span class="string">&#x27;link-color-dark&#x27;</span>,#e1e1e1);</span><br><span class="line">$link-hover-color             = get_color_info(<span class="string">&#x27;link-hover-color&#x27;</span>,$grey-light);</span><br><span class="line">$link-hover-color-dark        = get_color_info(<span class="string">&#x27;link-hover-color-dark&#x27;</span>,white);</span><br><span class="line">$link-decoration-color        = get_color_info(<span class="string">&#x27;link-decoration-color&#x27;</span>,$grey-dark);</span><br></pre></td></tr></table></figure>
<p>刷新页面后，我们发现文章标题、菜单、社交图标、超链接都变成了蓝色。如果要配置其他主题配项，那么只需要在 base.styl 中找到对应的变量，然后添加到 _config.next.yml，最后再往 variables.styl 中调用读色函数就行。</p>
<p>虽然我们可以直接把读色函数的定义和调用都放在 base.styl 中，但是我不推荐这样做。一旦主题包更新，这些对包文件直接更改的代码都会被覆盖掉，因此开启 custom variable 的配置才是长远之计。</p>
<h3 id="使用-font-awesome-图标库">使用 font-awesome 图标库</h3>
<p>笔者正在使用 hexo 5.0.0，该版本已自动引入了 font-awesome，官方说有600多个图标可用。</p>
<p>笔者作为新手，先不折腾 nexT 主题配置文件 _config.next.yml 中的 vendors 配置项了，此处的 font-awesome 是没有设置值的。</p>
<h4 id="通过-i-标签使用图标">通过 &lt;i&gt; 标签使用图标</h4>
<p>下面用雷电图标举例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bolt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：<i class="fas fa-bolt"></i></p>
<p>这种使用方法在 hexo 中很少使用，因为 hexo 是自动帮我们生成 html，我们基本没有机会在 html 中插入 &lt;i&gt; 标签。</p>
<h4 id="通过伪元素使用图标">通过伪元素使用图标</h4>
<p>在 nexT 主题的配置文件 _config.next.yml 中，我们可以找到 custom_file_path 配置项，在此处解锁 style，就可以使用自定义的 css 了。</p>
<p>如果看过上面自定义调色的内容，那此时已经解锁。我们在 source/_data/styles.styl 文件中添加以下内容。</p>
<div class="note info"><p>其中 font-family 对应的是 fas 和 fab，content 中的 Unicode 对应 fa-xxx。</p>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;<span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffb821</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;\f0e7&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Font Awesome 5 Free&quot;</span>;<span class="comment">/*或者Font Awesome 5 Brands*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到页面中所有 &lt;h1&gt; 标签前面都有一个黄色闪电图标。这里只是举个例子，实际使用时，我们要用更多的选择器限定图标的使用范围。</p>
]]></content>
      <tags>
        <tag>first</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 typescript 装饰器</title>
    <url>/2021/07/21/learnDescriptor1/</url>
    <content><![CDATA[<h1>浅谈 typescript 装饰器</h1>
<p>typescript 的装饰器，是个很尴尬的存在，从这个概念被提出以来，就一直在经历各种规范上的修改，直到现在还没有一种公认、稳定的规范拿上台。</p>
<p>装饰器是和 class 的概念相关的，从尤大的话来说，前端页面的交互逻辑使用 class 来写，可能并不是那么顺手。从 vue3 放出的 api 来看，vue3 最终还是选择了开放函数式编程的接口。用尤大的话来讲：设计一个 class 编程接口，要踩的坑实在是太多。</p>
<p>不过即使是冷门的语法，也阻止不了<ruby> 好奇<rt>得闲 </rt></ruby>的我去<ruby> 科研<rt>玩耍 </rt></ruby>一下。</p>
<h3 id="什么是装饰器">什么是装饰器</h3>
<p>说到装饰器，我们首先联想到的是 css。在编写 html 文档时，我们使用 css 写好页面的样式，然后通过 css 选择器将这些样式绑定到 html 标签。</p>
<span id="more"></span>
<p>typescript 的装饰器也是类似的使用方法，编写一个装饰器函数，然后通过 @methodName 将这个函数绑定到类、类的属性、类的方法。</p>
<p>它们的使用方法，有点像是做好一朵小红花，然后别在某个小朋友的衣领上一样，顾名思义装饰器。</p>
<h3 id="类属性装饰器">类属性装饰器</h3>
<p>typescript 的属性装饰器，是指对类中的属性进行装饰，以代码入侵性较低的方式增强该属性。当我们使用类对象的属性时，完成我们自定义的额外功能。</p>
<p>下面是一个用 es5 风格编写的属性装饰器的例子，通过 <strong>Object.defineProperty</strong> 将类的普通属性改写成存取器属性，然后通过 <strong><ruby> Object accessor<rt>getter and setter </rt></ruby></strong> 拦截属性的基础操作，从而添加自定义的额外代码。</p>
<p>属性装饰器函数有固定的参数：target 指被修饰的类，key 指被修饰类的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">delete</span> target[key]</span><br><span class="line">  <span class="keyword">let</span> backing = <span class="string">&#x27;_&#x27;</span>+key</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target,backing,&#123;</span><br><span class="line">      <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">enumerable</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getter</span>(<span class="params"><span class="built_in">this</span>:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">this</span>.backing</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Get: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setter</span>(<span class="params"><span class="built_in">this</span>:any,newVal:any</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Set: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">      <span class="built_in">this</span>.backing = newVal</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target,key,&#123;</span><br><span class="line">      <span class="attr">get</span>:getter,</span><br><span class="line">      <span class="attr">set</span>:setter,</span><br><span class="line">      <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">enumerable</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">  @logProperty</span><br><span class="line">  name?:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e = <span class="keyword">new</span> Employee</span><br><span class="line">e.name<span class="comment">//&quot;Get: name =&gt; undefined&quot; </span></span><br><span class="line">e.name = <span class="string">&#x27;sugar&#x27;</span><span class="comment">//&quot;Set: name =&gt; sugar&quot; </span></span><br><span class="line">e.name<span class="comment">//&quot;Get: name =&gt; sugar&quot; </span></span><br></pre></td></tr></table></figure>
<p>我们使用 es6 风格的 Proxy 和 Reflect 重写一下看看，哈哈，我也不会写，毕竟我也是抄别人的。</p>
<h3 id="类装饰器">类装饰器</h3>
<p>类装饰器可以给一个类插入一个类方法。</p>
<p>我们创建一个什么都不写的空类：Greeter，然后使用类装饰器为这个空类添加一个方法：greet()</p>
<p>类装饰器只需要一个参数：target，指代被装饰的类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">        target.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`我是greet方法哒，没想到吧 !!`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Greeting</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter()</span><br><span class="line">greeter.greet()</span><br></pre></td></tr></table></figure>
<p>如果我们的装饰方法需要传递参数，那么可以使用下面的写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">greeting:string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">        target.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`我是greet方法哒，没想到吧! <span class="subst">$&#123;greeting&#125;</span> !!`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Greeting(<span class="string">&#x27;乾杯 - ( ゜- ゜)つロ&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter()</span><br><span class="line">greeter.greet()</span><br></pre></td></tr></table></figure>
<h3 id="类方法装饰器">类方法装饰器</h3>
<p>方法装饰器和属性装饰器相比，多了一个参数：descriptor，这个参数里记录了原函数的引用，用于调用原函数。</p>
<p>下面的例子中，我们通过改写 descriptor.value 将原来的方法替换成了新方法，并新增了日志功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类方法装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogMethod</span>(<span class="params">target:any,key:string,descriptor:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldMethod = descriptor.value</span><br><span class="line">    <span class="keyword">const</span> newMethod = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">this</span>:any,...args:any[]</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> result = oldMethod.call(<span class="built_in">this</span>,args)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.logOutput)&#123;</span><br><span class="line">            <span class="built_in">this</span>.logOutput = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;any&gt;()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.logOutput.push(&#123;</span><br><span class="line">            <span class="attr">method</span>:key,</span><br><span class="line">            <span class="attr">parameter</span>:args,</span><br><span class="line">            <span class="attr">result</span>:result,</span><br><span class="line">            <span class="attr">timestamp</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    descriptor.value = newMethod</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    @LogMethod</span><br><span class="line">    <span class="function"><span class="title">double</span>(<span class="params">num:number</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Calculator()</span><br><span class="line">c.double(<span class="number">2</span>)</span><br><span class="line">c.double(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c.logOutput)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[LOG]: [&#123;</span></span><br><span class="line"><span class="comment">  &quot;method&quot;: &quot;double&quot;,</span></span><br><span class="line"><span class="comment">  &quot;parameter&quot;: [</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment">  &quot;result&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;timestamp&quot;: &quot;2021-07-21T08:58:45.706Z&quot;</span></span><br><span class="line"><span class="comment">&#125;, &#123;</span></span><br><span class="line"><span class="comment">  &quot;method&quot;: &quot;double&quot;,</span></span><br><span class="line"><span class="comment">  &quot;parameter&quot;: [</span></span><br><span class="line"><span class="comment">    10</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment">  &quot;result&quot;: 20,</span></span><br><span class="line"><span class="comment">  &quot;timestamp&quot;: &quot;2021-07-21T08:58:45.706Z&quot;</span></span><br><span class="line"><span class="comment">&#125;] </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="结语">结语</h3>
<p>以上是3种常用装饰器的使用案例，typescript 还有其他装饰器，这里就不列出了，因为笔者也只了解这3种。</p>
<p>本篇没有对装饰器做出足够详细的讲解，笔者也只懂这些，不足之处请多多包涵。</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>详谈游戏王实卡集换社小程序寄存仓——实卡圈最大倒爷撕破了自己的面具</title>
    <url>/2021/10/19/discussOfYgoCardProfiteer/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>圈里老人基本不用看别人的什么分析，但是圈里总还是些新人，毕竟<code>付叔叔（鹏鹏卡牌屋）</code>，<code>乐通（乐通天下，来来）</code>，<code>小豆丁（正版游戏王卡牌专门店）</code>这些乐色都有那么多月销量。所以还是开个贴细说下这玩意儿吧，哪怕能多帮到一个人也算是好的</p>
<h3 id="先说说个人卖家">先说说个人卖家</h3>
<div class="note info"><p>寄件</p>
</div>
<p>先说说作为散户卖家，给他们寄存，他们的可操作性吧</p>
<p>从你寄出去卡的那一刻起，所有的主动权都从你的手中转移到了集换社的手中。</p>
<p>寄过去卡，他可以告诉你你的卡损了他们不要，然后退给你一张损卡。你若是没拍封箱那集换社说什么就是什么。</p>
<span id="more"></span>
<p>即使你录了封箱，他们也可以以运输损为由退给你损卡，因为作为对快递公司下单的一方，运输出了问题是需要你去交涉而不是他们去。</p>
<p>甚至可以直接说没收到卡，不给你寄存也不给你退。反正集换社的客服也都是自己的手下人，又能去哪里讨一个公道？</p>
<div class="note info"><p>寄售</p>
</div>
<p>寄件部分过去，就到了寄售部分</p>
<p>“倒爷扫货”这个事情即使新人不知道，应该也至少听说过些相关内容。以前的倒爷想扫货，就是一家一家的点过去。散户拥有拒绝的权利，顶多就是被举报空挂吃个警告。</p>
<p>而有了这个寄存仓，作为最大倒爷的集换社甚至连开小号扫货都不需要了。只要涨了，就在你联系他们调价格之前告诉你已经卖出并且按照之前的挂价付给你钱，你也是一点办法都没有。拒绝的权利在你寄出卡的一瞬间就消失了。</p>
<p>至于没涨反而跌了的卡，那就更简单了。反正集换社不需要把钱付给你就能拿到你的卡，你的卡卖不出去和他们一点关系都没有，甚至还能白拿你一波寄存费。</p>
<div class="note info"><p>取回</p>
</div>
<p>如果你不想卖了想拿回自己的卡该怎么办？</p>
<p>我看了几遍公告，半个字没提如果想拿回自己的卡该怎么办。换句话说，他们直接拒绝寄还给你也可以说这个功能从一开始就禁止卖家取回。而有这一点兜底，他们完全可以卖掉你的卡都不给你钱，就告诉你没卖出去，反正你也不知道也拿不回去。</p>
<p>如果允许退，那肯定不可能是他们负担邮费。自己的卡没卖出去还自己白白承担来回邮费，铁亏的事情。</p>
<h3 id="而作为个人买家又如何呢？">而作为个人买家又如何呢？</h3>
<p>以上我说的内容实际上都属于可操作而不是实锤（但说实话真的是八九不离十），所以我假设以上情况全都不会出现，集换社会真的按照大家心里想的那样来寄卖</p>
<p>垄断这个词想必每个人都不会陌生，顶多就是一些人对具体怎么样垄断没有概念。如果没有概念，就记住只有货多的人才能操控价格就可以了。</p>
<p>我们可以看到，目前集换社内已经有了寄存仓库存，但没记错的话这个功能今天才上线，所以大概率是集换社自己上架，而定价也是相当的高（比如sr的增殖的g，最低价14r，而寄存售价50r）</p>
<p>这个上架目前来说主要作用还是吸引散户卖家，告诉你们可以把卡卖的很高，这样他们就可以零成本囤货（毕竟只有售出后才需要给卖家钱）。有了足够的货，就有了操纵价格的资本，这种离谱的价格可能就是以后买家买卡需要面对的了。</p>
<p>简单的假设一下，还是这张增殖的g，把寄存售价卡和一堆小号的卡价都卡在50然后去把这之下的货全部扫空，作为个人卖家看到最低价是50还会去挂15，20吗？这对每个买家来说都是很致命的事情。</p>
<p>更不用说这还是假设以上全部不会发生。如果集换社想，完全可以在这样操作把卡价抬上去，然后在寄售卖家还没改价之前告诉他们已经售出，并且按照先前价格付款。没有人有机会说理，因为平台炒卡，你找平台客服有什么用呢？</p>
<h3 id="所以-za-ma-le">所以 za ma le ?</h3>
<p>总之，这个功能的出现代表着集换社彻底的扯开脸皮，明目张胆的告诉所有人“我要炒卡”，然后去靠那些不明所以的，入圈不深的散户来囤货，再进一步操作国内的实卡市场。</p>
<p>之前一直在说lj 小程序滚出 zg，但那时小程序的问题在于高价手续费，装死客服等，直接选择不用他们偶尔用来查查卡就行了。</p>
<p>但现在如果真让他们这么倒腾市场，真不敢想以后会是什么情况，极有可能会波及到小程序之外的交易市场，毕竟不得不说，目前就我已知的实卡圈子，集换社确实是相当多人用也相对好用的查卡/卡价的地方。</p>
<p>虽然我只是一个普通的实卡玩家，没本事直接跟他们硬刚把这东西摁回去，但也不想什么都不做，就写个贴子希望能对对这个功能有期待的不明所以的入圈不深的玩家一点帮助。</p>
<p>作者：<code>无聊的咏罪</code> <a href="https://www.bilibili.com/read/cv13637361">原文链接</a><br>
出处：<code>bilibili</code></p>
]]></content>
      <tags>
        <tag>ygo</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 vue3 响应式原理 第一篇 响应式和副作用</title>
    <url>/2021/07/19/learnReactivity1/</url>
    <content><![CDATA[<h1>浅谈 vue3 响应式原理 第一篇 响应式和副作用</h1>
<p>一年前，在开课吧的视频里看到 winter、大圣还有尤大吹嘘着 vue3，各种新名词映入眼帘：watchEffect，reactive，ref，当时觉得好牛逼啊，一定要学一下（咕咕咕）。</p>
<p>一年后，watchEffect 是啥，reactive 是啥，ref 又是啥，怎么多了出了这么多东西，好难啊，趁现在赶紧摸索清楚。</p>
<h3 id="副作用">副作用</h3>
<p>我们经常能在尤大口中听到一个词： <code>sideEffect</code>。首次听这个词时，我也是一头雾水，副作用到底是什么，吃药时的副作用吗？在尤大在评论 winter 的小案例时，他讲了 winter 在组件销毁时没有清理掉之前设置的事件监听器，这会对程序产生副作用。当然，尤大此时说的是 <code>sideEffect</code> 是另一个方面的。</p>
<p>vue3中的 <code>sideEffect</code> 怎么理解？一些变量执行某些基本操作时，被拦截并执行一些事情，这些事情叫 <code>sideEffect</code>。</p>
<span id="more"></span>
<h3 id="拦截">拦截</h3>
<p>上面说到拦截，这是 vue 经常做的事情。vue 就喜欢在变量读取、写入的时候拦截并做操作。</p>
<p>在 vue2 中，尤大是通过 <code>Object.defineProperty</code> 给变量设置存取器属性，然后在存取器中执行副作用。到了 vue3，尤大用了 es6 的新特性 <code>Proxy</code> 和 <code>Reflect</code> 重写了这部分的代码。<code>Proxy</code> 提供了对变量基本操作的各种拦截回调，<code>Reflect</code> 则是对这些基本操作的实现。通过 <code>Proxy</code>，将变量的<strong>基本操作</strong>修改为<strong>副作用+基本操作</strong>，完成副作用的执行。</p>
<h3 id="响应式">响应式</h3>
<h4 id="响应式是什么">响应式是什么</h4>
<p>要明白响应式是什么，我们通过下面几行代码讲解</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> product = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">total = product.price * product.quantity <span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total <span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<p>上面代码表明了 total 是由 price 和 quantity 计算得出，但是当我们修改了 quantity 后，total 的值却没有跟着变，因此我们知道原生的 javascript 是没有响应式的</p>
<h4 id="那么要怎么实现响应式">那么要怎么实现响应式</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> product = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;</span><br><span class="line">trigger()</span><br><span class="line">total <span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">trigger()</span><br><span class="line">total <span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>我们发现，如果我们将 total 的计算方式保存为一个函数，然后在每次更新 quantity 之后调用一次，total 的值就会跟着变化。</p>
<p>那么只要我们在quantity更新时自动执行 <code>trigger</code>，响应式就实现了。</p>
<h4 id="自动？">自动？</h4>
<p>要实现自动，我们就需要前面讲到的知识：<strong>拦截</strong>。</p>
<p>我们通过 <code>Proxy</code>，在 quantity 执行 <code>set</code> 操作时进行拦截，然后将上述 <code>trigger</code> 添加为 <code>set</code> 操作的副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = <span class="keyword">new</span> <span class="built_in">Proxy</span>(p,&#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">    trigger()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">trigger()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>这下我们可以在 <code>set</code> 操作时自动执行 <code>trigger</code> 了</p>
<p>未完持续O(∩_∩)O</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 vue3 响应式原理 第二篇 记录与重放</title>
    <url>/2021/07/19/learnReactivity2/</url>
    <content><![CDATA[<style>
  <%- fa_inline('twitter', {prefix: 'fab'}) %>
</style>
<h1>浅谈 vue3 响应式原理 第二篇 记录与重放</h1>
<p>上一篇简单讲了一下什么是响应式，实现响应式的基本套路：在变量被设置新值的时候，重新执行一次副作用。</p>
<p>但是副作用有很多，我们不可能把每个副作用的执行都在 <code>Proxy</code> 中硬编码一遍，如何设计才能管理这么多副作用，这次来讲 vue3 实现响应式需要的数据结构。</p>
<h3 id="副作用的存储">副作用的存储</h3>
<p>要完成响应式，我们上一篇讲了在变量执行 <code>set</code> 操作时将副作用重放一遍。但是一个程序有这么多变量，这么多副作用，vue3 是如何管理的呢？</p>
<div class="note info"><p>首先这里引入一个<strong>新名词：depsMap</strong></p>
</div>
<p><code>depsMap</code> 是一个绑定属性与副作用的 <code>Map</code>。他的 key 是变量的属性名，他的 value 是属性对应的副作用。</p>
<span id="more"></span>
<p>一个属性不止一个副作用，因此 value 是一个 <code>Set</code>，这样就能存储多个副作用。</p>
<div class="note info"><p>我们给这个 Set 取一个<strong>新名字：dep</strong></p>
</div>
<p>由此可见，<code>dep</code> 是 <code>sideEffect</code> 的集合。这样一来，我们就能管理整个对象的副作用了。</p>
<h3 id="record-和-playback">record 和 playback</h3>
<p>接下来我们要把上一篇的响应式代码魔改一下。</p>
<div class="note info"><p>我们需要增加一个<strong>新方法：track</strong></p>
</div>
<p><strong>track</strong> 的作用是把副作用存储到结构中， <strong>trigger</strong> 的作用是从结构中找到副作用然后重放。</p>
<p>这2者，一个 <ruby> <strong>写入sideEffect</strong><rt>record </rt></ruby>，一个 <ruby> <strong>读取sideEffect</strong><rt>playback </rt></ruby>，是我们实现响应式的基本思路。</p>
<p>下面代码中通过 <strong>track</strong> 一步一步构造出 <code>depsMap</code> 和 <code>dep</code>，构建出属性、副作用之间的关系。</p>
<p>当属性发生变更时，再通过 <strong>trigger</strong> 重放副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">track(<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">p.quantity = <span class="number">3</span></span><br><span class="line">trigger(<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<h3 id="管理多个对象">管理多个对象</h3>
<p>为了管理更多响应式对象，我们使用一个新的 Map 记录所有的响应式对象。</p>
<p>引入<strong>新名词：targetMap</strong></p>
<p><strong>targetMap</strong> 是绑定对象和depsMap的 <code>WeakMap</code>。他的 key 是对象，而 value 是 depsMap。</p>
<p>这么一来，所有的对象都被记录在 <code>targetMap</code>，每个对象都有自己的 <code>depsMap</code>，每个 <code>depsMap</code> 都记录着对象的每个属性应该有哪些副作用。</p>
<p>加入 <code>targetMap</code> 之后，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">track(p,<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">p.quantity = <span class="number">3</span></span><br><span class="line">trigger(p,<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<h3 id="结合-Proxy-拦截实现自动-track-和-trigger">结合 Proxy 拦截实现自动 track 和 trigger</h3>
<p>以上面的代码为基础，我们将 <strong>Proxy</strong> 封装成 <strong>reactive</strong> 函数，实现“自动”启动 <strong>track</strong> 和 <strong>trigger</strong>。</p>
<p><strong>reactive</strong> 的作用是通过 <strong>Proxy</strong> 构造拦截器，把 <strong>track</strong> 和 <strong>trigger</strong> 两个方法放在 <code>get,set</code> 拦截器中调用。</p>
<p>因为执行 <code>effect</code> 时，会执行属性的读取，因此触发 <strong>track</strong> 将对象添加到 <code>targetMap</code>，然后构建关联的 <code>depsMap</code>，再构建 <code>dep</code> 存储当前 <code>effect</code>。</p>
<p>后来为属性设置新值时，就会触发 <strong>trigger</strong> 将对应的副作用执行一遍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">      track(target,key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> oldVal = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">        trigger(target,key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<h3 id="限制-track-的执行">限制 track 的执行</h3>
<p>我们发现，程序中读取属性是非常普遍的操作，甚至在副作用中也会读取属性。这样很容易形成一个闭环：trigger-&gt;track-&gt;trigger-&gt;track-&gt;…</p>
<p>原因是执行 <strong>trigger</strong> 时，我们是在一个 forEach 循环里，而 <strong>track</strong> 的作用是往 Set 中添加副作用，这样导致了执行 effect，然后添加 effect,再执行刚刚添加的 effect，再添加 effect，最后递归下去没有出口。</p>
<p>我们下面添加一个控制变量 <strong>activeEffect</strong>，让我们的 <strong>track</strong> 只在首次执行副作用时才被调用。</p>
<p>为此，我们重写了 <code>effect</code> 方法，<code>effect</code> 不再是副作用，而是一个传入副作用的函数，里面不仅管理了 <code>activeEffect</code> 的状态，还调用了副作用本身。</p>
<p>我们还修改了 <strong>track</strong> 方法，当 <code>activeEffect</code> 有值时，才会往下执行,并且最后 <code>dep</code> 添加的是 <code>activeEffect</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> activeEffect:any = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!activeEffect)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">      track(target,key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> oldVal = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">        trigger(target,key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">eff:any</span>)</span>&#123;</span><br><span class="line">  activeEffect = eff</span><br><span class="line">  activeEffect()</span><br><span class="line">  activeEffect = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>未完持续O(∩_∩)O</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 vue3 响应式原理 第三篇 ref、computed</title>
    <url>/2021/07/21/learnReactivity3/</url>
    <content><![CDATA[<h1>浅谈 vue3 响应式原理 第三篇 ref、computed</h1>
<p>能够坚持看到这里，实属不易，vue3 响应式的原理在前两篇已经讲得差不多了。</p>
<p>本篇作为一个补充，结合前面的内容，带大家了解 vue3 开放的2个 api：</p>
<div class="note info"><p>ref 函数和 computed 函数</p>
</div>
<h2 id="ref-和-computed-的由来"><a href="#ref-%E5%92%8C-computed-%E7%9A%84%E7%94%B1%E6%9D%A5">ref 和 computed 的由来</a></h2>
<p>回想起上一篇，我们把 <strong>Proxy</strong> 封装成了 <strong>Reactive 函数</strong></p>
<p>通过它，我们对对象的<strong>读取、写入</strong>进行<strong>拦截</strong>，在拦截中插入<strong>记录</strong>和<strong>重放</strong>的操作，就能把普通的 javascript 对象变成响应式对象。</p>
<span id="more"></span>
<p>那么如果我们需要让 javascript 基本类型也实现响应式该怎么办呢？我们写一个 ref 函数。</p>
<h3 id="ref"><a href="#ref">ref</a></h3>
<p>这个 ref 函数期待接收一个<strong>基本类型</strong>，并借助 <strong>reactive</strong> 包一下，然后返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">raw:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = reactive(&#123;&#125;)</span><br><span class="line">  result.value = raw</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，ref 函数就实现了。</p>
<p>不过 vue3 的 ref 不是这样实现的。</p>
<p>为了区分开<strong>基本类型</strong>和<strong>对象</strong>，方便框架后续的维护，vue3 的 ref 采用了独立的实现，并不是使用 <strong>Proxy</strong>，而是采用<strong>存取器属性</strong>做拦截。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">raw?:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> r = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">value</span>()&#123;</span><br><span class="line">      track(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> raw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newVal:any</span>)&#123;</span><br><span class="line">      raw = newVal</span><br><span class="line">      trigger(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="computed"><a href="#computed">computed</a></h3>
<p>说完 ref，我们来说 computed。</p>
<p>computed 实际上是对 effect 的其中一种封装。将<strong>借助副作用实现自动计算</strong>这个概念写成一个函数，他就是 <strong>computed</strong></p>
<div class="note info"><p><strong>computed函数</strong> 期待接收一个<strong>计算函数：getter</strong><br>
<strong>getter</strong> 会惰性地返回一个值，我们会创建一个响应式对象，将 <strong>getter</strong> 和<strong>响应式对象</strong>组合成我们的副作用，通过 effect 进行 <strong>track</strong>。<br>
<strong>getter</strong> 中出现的所有响应式对象，都会通过 effect 把这个副作用添加到它们各自的 dep</p>
</div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = ref()</span><br><span class="line">  effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    result.value = getter()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整合3篇文章内容后的响应式代码"><a href="#%E6%95%B4%E5%90%883%E7%AF%87%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E5%90%8E%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E4%BB%A3%E7%A0%81">整合3篇文章内容后的响应式代码</a></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> activeEffect:any = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!activeEffect)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">    <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">        targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">    <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">        depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    dep.add(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">    <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">    <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">        dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">            effect()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">            track(target,key)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> oldVal = target[key]</span><br><span class="line">            <span class="keyword">let</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">            <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">                trigger(target,key)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">eff:any</span>)</span>&#123;</span><br><span class="line">    activeEffect = eff</span><br><span class="line">    activeEffect()</span><br><span class="line">    activeEffect = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">raw?:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> r = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>()&#123;</span><br><span class="line">            track(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> raw</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newVal:any</span>)&#123;</span><br><span class="line">            raw = newVal</span><br><span class="line">            trigger(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = ref()</span><br><span class="line">    effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        result.value = getter()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">    <span class="attr">price</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">quantity</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> salePrice = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> product.price * <span class="number">0.9</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> total = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salePrice.value * product.quantity</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total.value,salePrice.value)<span class="comment">//5.4,1.8</span></span><br><span class="line">product.quantity = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(total.value,salePrice.value)<span class="comment">//7.2,1.8</span></span><br><span class="line">product.price = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(total.value,salePrice.value)<span class="comment">//10.8,2.7</span></span><br></pre></td></tr></table></figure>
<p>这些就是对 vue3 响应式原理比较简单的理解，实际上这些代码和 vue3 源码还是差距很大的，不过只要是能帮助我们学习响应式，这就是值得的。</p>
<a href="/2021/07/19/learnReactivity1/" title="浅谈 vue3 响应式原理 第一篇 响应式和副作用">浅谈 vue3 响应式原理 第一篇 响应式和副作用</a>
<br>
<a href="/2021/07/19/learnReactivity2/" title="浅谈 vue3 响应式原理 第二篇 记录与重放">浅谈 vue3 响应式原理 第二篇 记录与重放</a>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-route杂谈</title>
    <url>/2021/07/19/learnRouter/</url>
    <content><![CDATA[<h2 id="vue-router杂谈"><a href="#vue-router%E6%9D%82%E8%B0%88">vue-router杂谈</a></h2>
<p>说到 <code>vue-router</code> ，我会有联系到下面几个对象： <code>router,routes,route</code>，还有下面几个属性： <code>path,component,name</code>，还有下面几个方法： <code>BeforeRouteUpdate()，BeforeRouteEnter()，BeforeRouteLeave()，router.beforeEach()</code></p>
<p><code>router</code> 是一个路由器，他的功能是根据自身记录的路由表，完成路由和组件的映射，并通过 <code>go()，replace()，push()</code> 方法提供可编程的路由切换。</p>
<p><code>routes</code> 是路由表，是一个路由对象数组，他将被登记在路由器中。</p>
<p><code>route</code> 就是路由，路由表中的一个元素，是一个拥有地址 path、路由参数 params、查询串 query、路由名 name、组件 component 等信息的对象。根据这个路由对象，就能让地址栏中的地址 path 和组件 component 形成映射关系，路由名 name 和 component 形成映射关系。</p>
<span id="more"></span>
<h3 id="这些玩意怎么使用？">这些玩意怎么使用？</h3>
<p>地址栏输入地址后，router 通过 path 查找路由表中的路由，确定 path 和 component 的映射关系，从而实现输入指定地址显示指定组件。而使用 <code>router.push()</code> 等方法切换路由时，router 通过传入的参数 name，确定 name 和 component 的映射关系，确定参数 name 对应的 component 完成路由切换。</p>
<p><code>BeforeRouteWhatTheFuck()</code>，根据文档的说法，这个玩意称作导航守卫。“导航”意为路由发生变化，“守卫”意为回调。</p>
<p>当参数或查询改变时，不会触发进入/离开的导航守卫，而会触发更新的导航守卫</p>
<p>所以，进入/离开守卫与更新守卫是互斥的。</p>
<p>当path的查询和参数被修改时，进入 <code>BeforeRouteUpdate()</code></p>
<p>当查询和参数未被修改，或path被修改时，进入 <code>BeforeRouteEnter()</code> 和 <code>BeforeRouteLeave()</code></p>
<h3 id="由此可见">由此可见</h3>
<p>路由变更有两种：<strong>路由修改</strong>和<strong>路由切换</strong></p>
<p>前者复用实例，后者销毁并创建新实例</p>
<div class="note info"><p>关于路由切换时，watch route 无法触发这个问题，我的解释是这样的：组件实例被销毁，是对响应式对象的直接销毁，watch 无法追踪。</p>
</div>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>是时候学习 vue3 了</title>
    <url>/2021/07/15/learnVue3/</url>
    <content><![CDATA[<div class="note info"><p><strong>适用日期：2021-7</strong></p>
</div>
<h1>一、使用 vite 新建 Vue3 应用</h1>
<div class="note info"><p>Vite requires Node.js version &gt;=12.0.0.</p>
</div>
<h3 id="创建-vue3-项目">创建 vue3 项目</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn create @vitejs/app</span><br></pre></td></tr></table></figure>
<h3 id="进入-vue3-项目">进入 vue3 项目</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;项目名称&gt;</span><br></pre></td></tr></table></figure>
<h3 id="基本命令">基本命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install //安装依赖</span><br><span class="line">yarn dev //启动</span><br><span class="line">yarn run build //发行</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="其他问题：">其他问题：</h3>
<p>在执行 <code>import App from './App.vue'</code> 时，会提示<code>找不到模块“./App.vue”</code></p>
<p>解决办法是在项目目录（src 同级）下添加 <code>vue-shims.d.ts</code> 文件，内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>二、安装 vue-router 和 vuex</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-router@next vuex@next</span><br></pre></td></tr></table></figure>
<p>在 src 目录下新建 router/index.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, Router, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Hash&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@view/Login.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 路由模式</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="function"><span class="title">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>在 src 目录下新建 store/index.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; InjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, Store &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface State &#123;</span><br><span class="line">  <span class="attr">count</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;State&gt;&gt; = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore&lt;State&gt;(&#123;</span><br><span class="line">  <span class="function"><span class="title">state</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state : State</span>)</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1>三、CSS 预处理器</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader --dev</span><br></pre></td></tr></table></figure>
<h1>四、配置路径别名</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @types/node --dev</span><br></pre></td></tr></table></figure>
<p><code>vite.config.ts</code> 配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">...</span><br><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">  <span class="attr">alias</span>:&#123;</span><br><span class="line">    <span class="string">&quot;@&quot;</span>:path.resolve(__dirname,<span class="string">&quot;./src&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>别名配置后，你会发现在 import .ts 后缀的文件时会有红色波浪线<br>
<code>An import path cannot end with a '.ts' extension.</code><br>
原来是 <code>import ts</code> 时，需要在 <code>tsconfig.json</code> 配置别名，此处配置的别名需在 <code>vite.config.ts</code> 中有相同别名对应存在，具体配置如下：<br>
<code>tsconfig.json</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@view/*&quot;</span>:[<span class="string">&quot;src/views/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@utils/*&quot;</span>:[<span class="string">&quot;src/utils/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@api/*&quot;</span>:[<span class="string">&quot;src/api/*&quot;</span>]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>vite.config.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">      <span class="attr">alias</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@css&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/assets/css&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@c&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/components&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@img&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/assets/img&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@style&quot;</span> : path.resolve(__dirname, <span class="string">&quot;./src/style&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@view&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/views&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@utils&quot;</span>:path.resolve(__dirname, <span class="string">&quot;./src/utils&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@api&quot;</span>:path.resolve(__dirname, <span class="string">&quot;./src/api&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h1>五、配置服务器</h1>
<p><code>vite.config.ts</code> 配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">proxy</span>:&#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">        <span class="attr">target</span>:<span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="说明">说明</h3>
<p><code>target</code> 是你需要代理的地址，比如你的请求地址是</p>
<blockquote>
<p><code>http://localhost:8080/product/list</code></p>
</blockquote>
<p>那么 target 里面应该这么写：</p>
<blockquote>
<p><code>target:'http://localhost:8080/'</code></p>
</blockquote>
<p>编写请求的地方：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProductList</span>(<span class="params">parameter</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;api/product/list&#x27;</span>,</span><br><span class="line">      <span class="attr">parameter</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述配置会将你的 url 去掉 api 然后拼接上 target 去请求服务器</p>
<h1>六、Vue3 模板</h1>
<p>点击 vscode 左下角的齿轮，选择 <code>User Snippets-&gt;New Global Snippets file</code><br>
复制下列模板代码进文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;!-- $0 --&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;script lang=&#x27;ts&#x27;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;import &#123; defineComponent, ref, reactive, toRefs, onBeforeMount, onMounted&#125; from &#x27;vue&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;interface DataProps &#123;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  name: &#x27;&#x27;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    setup() &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      console.log(&#x27;1-开始创建组件-setup&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      const data: DataProps = reactive(&#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      onBeforeMount(() =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        console.log(&#x27;2.组件挂载页面之前执行----onBeforeMount&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      onMounted(() =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        console.log(&#x27;3.-组件挂载到页面之后执行-------onMounted&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      const refData = toRefs(data);&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      return &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        ...refData,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;style lang=&#x27;less&#x27; scoped&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>七、配置 env</h1>
<p>vite 中的 env 配置，文档中有讲，这里从简总结。</p>
<p>首先在项目根目录（src同级）处新建 <code>.env.production</code> 和 <code>.env.development</code>,然后用 <code>key=value</code> 的方式填写你需要使用的环境变量，换行区分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NODE_ENV = development</span><br></pre></td></tr></table></figure>
<p>在两个文件中分别配置 <code>NODE_ENV='development'</code> 和 <code>NODE_ENV='production'</code>。vite 会根据你使用 <code>package.json</code> 中的哪个 script，来确定项目的启动方式 MODE，然后通过 MODE 选择加载对应 <code>.env.[mode]</code> 文件的环境变量。让我们可以通过全局变量 <code>import.meta.env.MODE</code> 获取当前项目的 MODE</p>
<p>我们通常不会把配置变量写在 <code>.env.[mode]</code> 文件中，而是在 <code>src</code> 新建 <code>config</code> 文件夹，里面创建 <code>index.ts</code> 存储变量，后面再使用 <code>import.meta.env.MODE</code> 导出对应的配置变量对象。</p>
<h1>八、配置 axios</h1>
<p>网传 ts 配置 axios 有两种方式</p>
<h4 id="第一种">第一种</h4>
<p>建一个 <code>axios.ts</code> 放在 <code>utils</code> 文件夹，在其中创建 axios 实例，配置拦截器，然后直接 export 出一个 axios 实例。这种方式的配置，可以直接在 <code>api.ts</code> 中导入实例直接使用。</p>
<h4 id="第二种">第二种</h4>
<p>也是建一个 <code>axios.ts</code> 放在 <code>utils</code> 文件夹，不同的是 export 出的并不是一个 axios 实例，而是一个带 init 方法的 axios 自定义类。</p>
<p>这里介绍第一种：<br>
<code>utils</code> 文件夹的 <code>axios.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>[ axios 请求封装]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// import store from &quot;@/store&quot;;</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosResponse, AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/reactivity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// 根据环境不同引入不同api地址</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&quot;@/config&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: config.baseApi, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span> <span class="comment">// send cookies when cross-domain requests</span></span><br><span class="line">  <span class="comment">// headers: &#123;</span></span><br><span class="line">  <span class="comment">//  // clear cors</span></span><br><span class="line">  <span class="comment">//  &#x27;Cache-Control&#x27;: &#x27;no-cache&#x27;,</span></span><br><span class="line">  <span class="comment">//  Pragma: &#x27;no-cache&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Request interceptors</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 加载动画</span></span><br><span class="line">    <span class="keyword">if</span> (config.loading) &#123;</span><br><span class="line">      <span class="comment">// Toast.loading(&#123;</span></span><br><span class="line">      <span class="comment">//   message: &quot;加载中...&quot;,</span></span><br><span class="line">      <span class="comment">//   forbidClick: true</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在此处添加请求头等，如添加 token</span></span><br><span class="line">    <span class="comment">// if (store.state.token) &#123;</span></span><br><span class="line">    <span class="comment">// config.headers[&#x27;Authorization&#x27;] = `Bearer $&#123;store.state.token&#125;`</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// Response interceptors</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="keyword">async</span> (response: AxiosResponse) =&gt; &#123;</span><br><span class="line">    <span class="comment">// await new Promise(resovle =&gt; setTimeout(resovle, 3000))</span></span><br><span class="line">    <span class="comment">// Toast.clear();</span></span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// token 过期</span></span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">401</span>)&#123;</span><br><span class="line">        ElMessage(res.message)</span><br><span class="line">        <span class="comment">// 警告提示窗</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (res.code == <span class="number">403</span>) &#123;</span><br><span class="line">        ElMessage(res.message)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 若后台返回错误值，此处返回对应错误对象，下面 error 就会接收</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.msg || <span class="string">&quot;Error&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意返回值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Toast.clear();</span></span><br><span class="line">    <span class="keyword">if</span> (error &amp;&amp; error.response) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求错误(400)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          error.message = <span class="string">&quot;未授权,请登录(401)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          error.message = <span class="string">&quot;拒绝访问(403)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">          error.message = <span class="string">`请求地址出错: <span class="subst">$&#123;error.response.config.url&#125;</span>`</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">405</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求方法未允许(405)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求超时(408)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务器内部错误(500)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务未实现(501)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">          error.message = <span class="string">&quot;网络错误(502)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务不可用(503)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">          error.message = <span class="string">&quot;网络超时(504)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">          error.message = <span class="string">&quot;HTTP版本不受支持(505)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          error.message = <span class="string">`连接错误: <span class="subst">$&#123;error.message&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error.message == <span class="string">&quot;Network Error&quot;</span>) &#123;  </span><br><span class="line">        error.message = <span class="string">&quot;网络异常，请检查后重试！连接到服务器失败，请联系管理员&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ElMessage(error.message)</span><br><span class="line">    <span class="comment">// store.auth.clearAuth()</span></span><br><span class="line">    <span class="comment">// store.dispatch(&quot;clearAuth&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config:AxiosRequestConfig</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = reactive(&#123;&#125;)</span><br><span class="line">  service(config).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(result,response.data)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; service, request &#125;</span><br></pre></td></tr></table></figure>
<p>在 api 文件中使用配置好的 axios<br>
<code>api</code> 文件夹的 <code>article.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/axios&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">article</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/author&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">commentList</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/commentList&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里还导出了一个 request 函数，因为 vue3 有 reactive，即使异步请求之前返回了空的 result，后续回调依然可以给这个已经返回的 result 赋值。这样我们就可以在 component 中这样获取值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">    <span class="attr">article</span>:article(&#123;&#125;),</span><br><span class="line">    <span class="attr">author</span>:author(&#123;&#125;),</span><br><span class="line">    <span class="attr">commentList</span>:commentList(&#123;&#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> refData = toRefs(data);</span><br><span class="line">  <span class="keyword">return</span> &#123; ...refData &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>九、配置 mock</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mockjs</span><br><span class="line">yarn add vite-plugin-mock -D</span><br></pre></td></tr></table></figure>
<p>新建 mock 目录(src同级)，在 mock 目录中新建 test.ts 作为 mock 数据文件<br>
<code>mock/test.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MockMethod &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="attr">category</span>:<span class="string">&#x27;人文&#x27;</span>,</span><br><span class="line">          <span class="attr">body</span>:<span class="string">&#x27;halo&#x27;</span>,</span><br><span class="line">          <span class="attr">recommendCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">againstCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">pre</span>:<span class="string">&#x27;NOR Flash驱动程序&#x27;</span>,</span><br><span class="line">          <span class="attr">next</span>:<span class="string">&#x27;移植DM900C网卡驱动&#x27;</span>,</span><br><span class="line">          <span class="attr">commentCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">visitCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/author&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;quinoa&#x27;</span>,</span><br><span class="line">          <span class="attr">followCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">fansCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">] <span class="keyword">as</span> MockMethod[]</span><br></pre></td></tr></table></figure>
<p>在 <code>utils</code> 目录新建 <code>mockProdServer.ts</code> 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  mockProdServer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProdMockServer &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock/es/createProdMockServer&#x27;</span>;</span><br><span class="line"><span class="comment">// 逐一导入您的mock.ts文件</span></span><br><span class="line"><span class="comment">// 如果使用vite.mock.config.ts，只需直接导入文件</span></span><br><span class="line"><span class="comment">// 可以使用 import.meta.glob功能来进行全部导入</span></span><br><span class="line"><span class="keyword">import</span> testModule <span class="keyword">from</span> <span class="string">&#x27;mock/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setupProdMockServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createProdMockServer([...testModule]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>vite.config.ts</code> 中配置 <code>vite-plugin-mock</code><br>
<code>vite.config.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  vue(),</span><br><span class="line">  viteMockServe(&#123;</span><br><span class="line">    <span class="attr">mockPath</span>:<span class="string">&#x27;./mock&#x27;</span>,</span><br><span class="line">    <span class="attr">supportTs</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">watchFiles</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">localEnabled</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">prodEnabled</span>:command !==<span class="string">&#x27;serve&#x27;</span> &amp;&amp; prodMock,</span><br><span class="line">    <span class="comment">// 这样可以控制关闭mock的时候不让mock打包到最终代码</span></span><br><span class="line">    <span class="attr">injectCode</span>:<span class="string">`</span></span><br><span class="line"><span class="string">      import &#123; setupProdMockServer &#125; from &#x27;@utils/mockProdServer&#x27;;</span></span><br><span class="line"><span class="string">      setupProdMockServer();</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在 vite.config.ts 中关闭代理服务器，就可以使用 ts 文件模拟的 mock 数据了。</p>
<p>需要注意的是如果启动项目时出错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span>:<span class="number">30</span>:<span class="number">31</span> ├F10: AM┤ [vite:mock] mock reload error <span class="built_in">Error</span> [ERR_STREAM_DESTROYED]: Cannot call write after a stream was destroyed</span><br><span class="line">events.js:<span class="number">292</span></span><br><span class="line">    <span class="keyword">throw</span> er; <span class="comment">// Unhandled &#x27;error&#x27; event</span></span><br></pre></td></tr></table></figure>
<p>这是目前可能会遇到的 <code>esbuild</code> 的 bug（2021-4至2021-7），在当前 blog 项目中使用如下命令可解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node ./node_modules/esbuild/install.js</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 第一弹 —— 模板语法、数据绑定、计算属性、条件渲染</title>
    <url>/2021/10/09/learnVueAgain-1/</url>
    <content><![CDATA[<h1>001 —— 初识 Vue</h1>
<h4 id="使用方法">使用方法</h4>
<ol>
<li>准备好一个容器</li>
<li>创建 Vue 实例。</li>
<li>el 用于指定当前 Vue 实例为哪个容器服务，值通常为 css 选择器字符串。</li>
<li>data 用于存储数据，数据供 el 所指定的容器去使用，值我们暂时写成一个对象.</li>
</ol>
<h4 id="详细解答">详细解答</h4>
<pre><code>1. 想让 Vue 工作，就必须创建一个 Vue 实例，且传入一个配置对象；
2. root 容器里的代码依然符合 html 规范，只不过混入了一些特殊的 Vue 语法；
3. root 容器里的代码被称为 [ Vue 模板 ]；
4. Vue 实例和容器是一一对应的；
5. 真实开发中只有一个 Vue 实例，并且会配合着组件一起使用；
6. `&#123;&#123;xxx&#125;&#125;` 中的 xxx 要写 js 表达式，且 xxx 可以自动读取到 data 中的所有属性；
7. 一旦 data 中的数据发生改变，那么模板中用到该数据的地方会自动更新；
</code></pre>
<span id="more"></span>
<h1>002 —— Vue 的模板语法</h1>
<div class="note info no-icon"><p>Vue 的模板语法有 2 大类</p>
</div>
<h4 id="插值语法：">插值语法：</h4>
<pre><code>1. 功能：用于解析标签体内容
2. 写法：`&#123;&#123;xxx&#125;&#125;`, xxx 是 js 表达式，且可以直接读取 data 中的所有属性。
</code></pre>
<h4 id="指令语法：">指令语法：</h4>
<pre><code>1. 功能：用于解析标签（包括：标签属性、标签体内容、绑定事件...）
2. 写法：v-bind:href=&quot;xxx&quot; 或简写为 :href=&quot;xxx&quot;, xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。
备注：Vue 中有很多指令，且形式都是：v-????, 此处我们只是拿 v-bind 举个例子。
</code></pre>
<h1>003 —— Vue 的数据绑定</h1>
<h4 id="Vue-中有2种数据绑定的方式">Vue 中有2种数据绑定的方式</h4>
<pre><code>1. 单向绑定(v-bind): 数据只能从 data 流向页面。
2. 双向绑定(v-model): 数据不仅能从 data 流向页面，还可以从页面流向 data。
</code></pre>
<div class="note info no-icon"><p>备注：<br>
双向绑定一般都应用在表单类元素上（如：input、select等）<br>
v-model:value 可以简写为 v-model,因为 v-model 默认收集的就是 value 值。</p>
</div>
<h1>004 —— el 和 data 的两种写法</h1>
<h4 id="data-与-el-的-2-种写法">data 与 el 的 2 种写法</h4>
<p><strong>el 有 2 种写法</strong></p>
<pre><code>1. new Vue 时候配置 el 属性。
2. 先创建 Vue 实例，随后再通过 vm.$mount('#root') 指定 el 的值。
</code></pre>
<p><strong>data 有 2 种写法</strong></p>
<pre><code>1. 对象式
2. 函数式
    &gt; 如何选择：目前哪种写法都可以，以后学习到组件时， data 必须使用函数式，否则会报错。
</code></pre>
<div class="note warning no-icon"><p>一个重要的原则：由 Vue 管理的的函数，一定不要写箭头函数，一旦写了箭头函数， this 就不再是 Vue 实例了。</p>
</div>
<h1>005 —— MVVM 模型</h1>
<h4 id="MVVM-模型">MVVM 模型</h4>
<pre><code>M：模型（model）：data 中的数据
V：视图（View）：模板代码
VM：视图模型（ViewModel）：Vue 实例
</code></pre>
<p>观察发现：</p>
<ol>
<li>data 中所有的属性，最后都出现在 vm 身上。</li>
<li>vm 身上所有的属性及 Vue 原型上所有的属性，在 Vue 模板中都可以直接使用。</li>
</ol>
<h1>006 —— Vue 中的数据代理</h1>
<div class="note primary no-icon"><p>通过 vm 对象来代理 data 对象中属性的操作（读/写）</p>
</div>
<h4 id="Vue-中数据代理的好处：">Vue 中数据代理的好处：</h4>
<pre><code>更加方便地操作 data 中的数据
</code></pre>
<h4 id="基本原理：">基本原理：</h4>
<pre><code>1. 通过 Object.defineProperty() 把 data 对象中所有属性添加到 vm 上。
2. 为每一个添加到 vm 上的属性，都指定一个 getter/setter。
3. 在 getter/setter 内部去操作（读/写）data 中对应的属性。
</code></pre>
<h1>007 —— 事件处理</h1>
<h4 id="事件的基本使用：">事件的基本使用：</h4>
<ol>
<li>使用 v-on:xxx 或 @xxx 绑定事件，其中 xxx 是事件名；</li>
<li>事件的回调需要配置在 methods 对象中，最终会在 vm 上；</li>
<li>methods 中配置的函数，不要用箭头函数！否则 this 就不是 vm 了；</li>
<li>methods 中配置的函数，都是被 Vue 所管理的函数，this 的指向是 vm 或组件实例对象；</li>
<li>@click=“demo” 和 @click=“demo($event)” 效果一致，但后者可以传参；</li>
</ol>
<h4 id="Vue-中的事件修饰符：">Vue 中的事件修饰符：</h4>
<ol>
<li>prevent：阻止默认事件（常用）；</li>
<li>stop：阻止事件冒泡（常用）；</li>
<li>once：事件只触发一次（常用）；</li>
<li>capture：使用事件的捕获模式；</li>
<li>self：只有 event.target 是当前操作的元素时才会触发事件；</li>
<li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</li>
</ol>
<h4 id="Vue-中的键盘事件：">Vue 中的键盘事件：</h4>
<div class="note primary no-icon"><p><strong>Vue 中常见的键盘别名</strong><br>
回车 =&gt; enter<br>
删除 =&gt; delete （捕获“删除”和“退格”键）<br>
退出 =&gt; esc<br>
空格 =&gt; space<br>
换行 =&gt; tab （特殊，必须配合 keydown 去使用）<br>
上 =&gt; up<br>
下 =&gt; down<br>
左 =&gt; left<br>
右 =&gt; right</p>
</div>
<ol>
<li>Vue 未提供别名的按键，可以使用按键原始的 key 值去绑定，但注意要转为 kebab-case（短横线命名）</li>
<li>系统修饰键（用法特殊）：ctrl、alt、shift、meta<br>
配合 keyup 使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发<br>
配合 keydown 使用：正常触发事件</li>
<li>也可以使用 keyCode 去指定具体的按键（不推荐）</li>
<li>Vue.config.keyCodes.自定义别名 = 键码，可以去定制按键别名</li>
</ol>
<h1>008 —— 计算属性</h1>
<p><strong>定义：</strong> 要用的属性不存在，要通过已有的属性计算得来。</p>
<p><strong>原理：</strong> 底层借助了 Object.defineProperty() 方法提供的 getter 和 setter。</p>
<p><strong>优势：</strong> 与 method 实现相比，内部有缓存机制（复用），效率更高，调试方便。</p>
<h4 id="get-函数什么时候执行？">get 函数什么时候执行？</h4>
<pre><code>  1. 初次读取时会执行一次
  2. 当依赖的数据发生改变时会被再次调用
</code></pre>
<div class="note info no-icon"><p>备注:</p>
<ol>
<li>计算属性最终会出现在 vm 上，直接读取使用即可。</li>
<li>如果计算属性要被修改，那必须写 set 函数去响应修改，且 set 中要引起计算时依赖的数据发生更改。</li>
</ol>
</div>
<h1>009 —— 监视属性 watch</h1>
<p>当被监视的属性变化时，回调函数自动调用，进行相关操作<br>
监视的属性必须存在，才能进行监视！！！</p>
<h4 id="监视的两种写法：">监视的两种写法：</h4>
<pre><code>  1. new Vue 时传入 watch 配置
  2. 通过 vm.$watch 监视
</code></pre>
<h4 id="深度监视">深度监视</h4>
<ol>
<li>Vue 中的 watch 默认不监视对象內部值的改变（一层）。</li>
<li>配置 deep:true 可以监视对象内部值的改变（多层）。</li>
</ol>
<div class="note info no-icon"><p>备注：</p>
<ol>
<li>Vue 自身可以监视对象内部值的改变，但 Vue 提供的 watch 默认不可以！</li>
<li>使用 watch 时根据数据的具体结构，决定是否使用深度监视。</li>
</ol>
</div>
<p><strong>computed 和 watch 之间的区别</strong><br>
1. computed 能完成的功能，watch 都可以完成。<br>
2. watch 能完成的功能，computed 不一定能完成，例如：watch 可以进行异步操作。</p>
<pre><code>两个重要的小原则：
1. 被 Vue 所管理的函数，最好写成普通函数，这样 this 的指向才是 vm 或组件实例对象。
2. 所有不被 Vue 所管理的函数（setTimeout 定时器的回调函数，axios 的回调函数，promise 的回调函数等），最好写成箭头函数
这样 this 的指向才是 vm 或组件实例对象。
</code></pre>
<h1>010 —— 绑定样式</h1>
<p><strong>class 样式</strong></p>
<p>写法：class = “xxx” xxx 可以是字符串、对象、数组。</p>
<pre><code>绑定 class 样式 —— 字符串写法，适用于：样式的类名不确定，需要动态指定。
绑定 class 样式 —— 数组写法，适用于：要绑定的样式个数不确定、名字也不确定。
绑定 class 样式 —— 对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用。
</code></pre>
<p><strong>style 样式</strong></p>
<pre><code>:style = &quot;&#123;fontSize:xxx&#125;&quot; 其中 xxx 是动态值。
:style = &quot;[a,b]&quot; 其中 a、b 是样式对象。 
</code></pre>
<h1>011 —— 条件渲染</h1>
<h4 id="v-if">v-if</h4>
<p>适用于：切换频率较 <strong>低</strong> 的场景。<br>
特点：不展示的 DOM 元素直接被移除。</p>
<pre><code>v-if = &quot;表达式&quot;
v-else-if = &quot;表达式&quot;
v-else
</code></pre>
<div class="note warning no-icon"><p>注意：v-if 可以和 :v-else-if、v-else 一起使用，但要求结构不能被“打断”。</p>
</div>
<h4 id="v-show">v-show</h4>
<p>适用于：切换频率较 <strong>高</strong> 的场景。<br>
特点：不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉。</p>
<pre><code>v-show = &quot;表达式&quot;
</code></pre>
<div class="note info no-icon"><p>备注：使用 v-if 的时候，元素可能无法捕获到，而使用 v-show 一定能捕获到。</p>
</div>
<h1>012 —— 列表渲染</h1>
<h4 id="v-for-指令">v-for 指令</h4>
<ol>
<li>
<p>用于展示列表数据</p>
</li>
<li>
<p>语法 v-for = “(item,index) in xxx” :key=“yyy”</p>
</li>
<li>
<p>可遍历：数组、对象、字符串、按数字遍历指定次数</p>
<pre><code> 数组：（item,index）
 对象：（value,key）
 字符串：（char,index）
 数字：（number,index）
</code></pre>
</li>
</ol>
<h1>013 —— 收集表单数据</h1>
<p><code>&lt;input type=&quot;text&quot;/&gt;</code><br>
v-model 收集 value 值，用户输入 value 值。</p>
<p><code>&lt;input type=&quot;radio&quot;/&gt;</code><br>
v-model 收集 value 值，且要给标签配置 value 值。</p>
<p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code>.</p>
<ol>
<li>
<p>没有配置 input 的 value 属性，那么收集的就是 checked（勾选 or 未勾选，是布尔值）</p>
</li>
<li>
<p>配置 input 的 value 属性：</p>
<pre><code>  1. v-model 的初始值是非数组，那么收集的就是 checked（勾选 or 未勾选，是布尔值）
  2. v-model 的初始值是数组，那么收集的就是 value 组成的数组
</code></pre>
</li>
</ol>
<div class="note info no-icon"><p>备注：v-model 的三个修饰符</p>
<ol>
<li>lazy：失去焦点再收集数据</li>
<li>number：输入的字符串转为有效的数字</li>
<li>trim：输入的首尾空格过滤</li>
</ol>
</div>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 第二弹 —— 数据劫持、生命周期、组件、props</title>
    <url>/2021/10/22/learnVueAgain-2/</url>
    <content><![CDATA[<h1>常见问题：react、vue 中的 key 有什么作用？（key的内部原理）</h1>
<p><strong>虚拟 DOM 中 key 的作用</strong><br>
key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】<br>
随后 Vue 进行【新虚拟 DOM】和【旧虚拟 DOM】的差异比较，比较规则如下：</p>
<p><strong>对比规则：</strong><br>
旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：</p>
<ol>
<li>若虚拟 DOM 内容没变，直接使用之前的真实 DOM！</li>
<li>若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM。<br>
旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key<br>
创建新的真实 DOM，随后渲染到页面。</li>
</ol>
<span id="more"></span>
<p><strong>用 index 作为 key 可能会引发的问题：</strong></p>
<ol>
<li>若对数据进行：逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实 DOM 更新 ==&gt; 界面效果没问题，但效率低。</li>
<li>如果结构中还包含输入类 DOM：会产生错误 DOM 更新 ==&gt; 界面有问题。</li>
</ol>
<p><strong>开发中如何选择 key?</strong></p>
<ol>
<li>最好使用每条数据的唯一标识作为 key,比如 id、手机号、身份证号、学号等唯一值。</li>
<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</li>
</ol>
<h1>常见问题：Vue 监视数据的原理</h1>
<p><strong>Vue 会监视 data 中所有层次的数据。</strong></p>
<p><strong>如何监测对象中的数据？</strong><br>
通过 setter 实现监视，且在 new Vue 时就传入要监测的数据。</p>
<ol>
<li>对象中后追加的属性，Vue 默认不做响应式处理。</li>
<li>如需给后追加的属性做响应式，请使用如下 API:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.set(target, propertyName/index, value) 或 vm.$set(target, propertyName/index, value)</span><br></pre></td></tr></table></figure>
<p><strong>如何监测数组中的数据？</strong><br>
通过包裹更新元素的方法实现，本质就是做了两件事：</p>
<ol>
<li>调用原生对应的方法对数组进行更新。</li>
<li>重新解析模板，进而更新页面。</li>
</ol>
<p><strong>在 Vue 中修改数组中的某个元素一定要用如下方法：</strong></p>
<ol>
<li>使用这些 API: push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li>
<li>Vue.set() 或 vm.$set()</li>
</ol>
<div class="note warning no-icon"><p>特别注意：Vue.set() 或 vm.$set() 不能给 vm 或 vm 的根数据对象添加属性！！！</p>
</div>
<h1>014 —— 过滤器</h1>
<p><strong>定义：</strong> 对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</p>
<p><strong>语法：</strong></p>
<pre><code> 1. 注册过滤器：Vue.filter(name,callback) 或 new Vue&#123;filters:&#123;&#125;&#125;
 2. 使用过滤器：`&#123;&#123; xxx | 过滤器名 &#125;&#125;` 或 v-bind:属性 = &quot;xxx | 过滤器名&quot;
</code></pre>
<div class="note info no-icon"><p>备注：</p>
<ol>
<li>过滤器也可以接收额外的参数、多个过滤器也可以串联。</li>
<li>并没有改变原本的数据，是产生新的对应的数据。</li>
</ol>
</div>
<h1>015 —— 内置指令</h1>
<p>我们学过的指令</p>
<ol>
<li>v-bind：单向绑定解析表达式，可简写成 :xxx</li>
<li>v-model：双向数据绑定</li>
<li>v-for：遍历数组/对象/字符串</li>
<li>v-on：绑定事件监听，可简写成 @xxx</li>
<li>v-if：条件渲染（动态控制节点是否存在）</li>
<li>v-else：条件渲染（动态控制节点是否存在）</li>
<li>v-show：条件渲染（动态控制节点是否显示）</li>
</ol>
<h4 id="v-text-指令">v-text 指令</h4>
<ol>
<li>作用：向其所在节点中渲染文本内容。</li>
<li>与插值语法的区别：v-text 会替换掉节点中的内容， 则不会。</li>
</ol>
<h4 id="v-html-指令">v-html 指令</h4>
<ol>
<li>作用：向指定节点中渲染包含 html 结构的内容。</li>
<li>与插值语法的区别：
<ol>
<li>v-html 会替换掉节点中所有内容， 则不会。</li>
<li>v-html 可以识别 html 结构。</li>
</ol>
</li>
<li>严重注意：v-html 有安全性问题！！！
<ol>
<li>在网站上动态渲染任意 HTML 是非常危险的，容易导致 XSS 攻击。</li>
<li>一定要在可信的内容上使用 v-html，永不要用在用户提交的内容上！</li>
</ol>
</li>
</ol>
<h4 id="v-cloak-指令（没有值）">v-cloak 指令（没有值）</h4>
<ol>
<li>本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性。</li>
<li>使用 css 属性选择器配合 v-cloak 可以解决网速慢时页面展示出  等未解析模板的问题。</li>
</ol>
<h4 id="v-once-指令">v-once 指令</h4>
<ol>
<li>v-once 所在节点在初次动态渲染后，就视为静态内容了。</li>
<li>以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能。</li>
</ol>
<h4 id="v-pre-指令">v-pre 指令</h4>
<ol>
<li>跳过其所在节点的编译过程。</li>
<li>可利用它跳过没有使用指令语法、没有使用插值语法的节点，会加快编译。</li>
</ol>
<h1>016 —— 自定义指令</h1>
<h4 id="局部指令：">局部指令：</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">directives</span>:&#123;指令名:配置对象&#125;</span><br><span class="line">&#125;)</span><br><span class="line">或</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;<span class="attr">directives</span>:&#123;指令名:回调函数&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="全局指令">全局指令</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(指令名,配置对象)</span><br><span class="line">或</span><br><span class="line">Vue.directive(指令名,回调函数)</span><br></pre></td></tr></table></figure>
<p><strong>配置对象中常用的的 3 个回调：</strong></p>
<ol>
<li>bind：指令与元素成功绑定时调用。</li>
<li>insert：指令所在元素被插入页面时调用。</li>
<li>update：指令所在模板被重新解析时调用。</li>
</ol>
<blockquote>
<p>备注：</p>
<ol>
<li>指令定义时不加 v- 但使用时要加 v-</li>
<li>指令名如果是多个单词，要使用 kebab-case 命名方式，不要用 camelCase 命名。</li>
</ol>
</blockquote>
<h1>017 —— 生命周期</h1>
<p><strong>生命周期：</strong></p>
<ol>
<li>生命周期是 Vue 在关键时刻帮我们调用的一些特殊名称的函数。</li>
<li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</li>
<li>生命周期函数的 this 指向的是 vm 或组件实例对象。</li>
</ol>
<p><strong>常用的生命周期钩子</strong>：</p>
<ol>
<li>mounted：发送 ajax 请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</li>
<li>beforeDestroy：清除定时器、解绑自定义事件、取消订阅信息等【收尾工作】</li>
</ol>
<p><strong>关于销毁 Vue 实例</strong></p>
<ol>
<li>销毁后借助 Vue 开发者工具看不到任何信息。</li>
<li>销毁后自定义事件会失效，但原生 DOM 事件依然有效。</li>
<li>一般不会在 beforeDestroy 操作数据，因为即使操作数据，也不会再触发更新流程了。</li>
</ol>
<h1>018 —— 组件</h1>
<p><strong>Vue 中使用组件的三大步骤：</strong></p>
<pre><code>  1. 定义组件（创建组件）
  2. 注册组件
  3. 使用组件（写组件标签）
</code></pre>
<p><strong>一、如何定义一个组件？</strong><br>
使用 Vue.extend(options) 创建<br>
其中的 options 和 new Vue(options) 时传入的 options 几乎一样，但也有点区别：<br>
区别如下：</p>
<pre><code>  1. el 不要写，为什么？ —— 最终所有组件都要经过一个 vm 的管理，由 vm 的 el 决定服务哪个容器。
  2. data 必须写成函数，为什么？ —— 避免组件被复用时，数据存在引用关系。
</code></pre>
<div class="note info no-icon"><p>备注：使用 template 可以配置组件结构。</p>
</div>
<p><strong>二、如何注册组件？</strong></p>
<ol>
<li>局部注册：靠 new Vue 的时候传入 components 选项</li>
<li>全局注册：靠 Vue.component(‘组件名’，组件)</li>
</ol>
<p><strong>三、编写组件标签</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>几个注意点：</strong></p>
<pre><code>  1. 关于组件名：
     一个单词组成（首字母小写）：school
     多个单词组成（CamelCase命名）：MySchool

  2. 关于组件标签
     一个单词组成：&lt;school&gt;&lt;/school&gt;
     多个单词组成（kebab-case命名）：&lt;my-school&gt;&lt;/my-school&gt;

  3. 注册组件的简写方式：
     const school = Vue.extend(options) 可简写为：const school = options
</code></pre>
<h1>Vue-CLI 脚手架</h1>
<p><strong>脚手架文件结构</strong><br>
├─node_modules<br>
├─public<br>
│   ├─favicon.ico：页签图标<br>
│   └─index.html：主页面<br>
├─src<br>
│   ├─assets：存放静态资源<br>
│   │   └─logo.png<br>
│   ├─components：存放组件<br>
│   │   └─HelloWorld.vue<br>
│   ├─App.vue：汇总所有组件<br>
│   └─main.js：入口文件<br>
├─.gitignore：git版本管制忽略的配置<br>
├─babel.config.js：babel的配置文件<br>
├─package.json：应用包配置文件<br>
<a href="http://xn--README-2n7cpi.md">├─README.md</a>：应用描述文件<br>
└─package-lock.json：包版本控制文件</p>
<p><strong>关于不同版本的 Vue 说明</strong><br>
vue.js 和 vue.runtime.xxx.js 的区别：</p>
<ol>
<li>vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。</li>
<li>vue.runtime.xxx.js 是运行版的 Vue，只包含核心功能，没有模板解析器。</li>
</ol>
<div class="note warning no-icon"><p>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用 template 配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容。</p>
</div>
<p><strong>vue.config.js 配置文件</strong></p>
<ol>
<li>使用 vue inspect &gt; output.js 可以查看到 Vue 脚手架的默认配置。</li>
<li>使用 vue.config.js 可以对脚手架进行个性化定制，详情见 <a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li>
</ol>
<h1>ref 属性</h1>
<p><strong>概念：</strong> 被用来给元素或子组件注册引用信息（id的替代者）<br>
应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</p>
<p><strong>使用方式：</strong><br>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">或 </span><br><span class="line"><span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">School</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>获取：</strong> <code>this.$refs.xxx</code></p>
<h1>配置项 props</h1>
<p>功能：让组件接收外部传进来的数据。</p>
<p><strong>传递数据：</strong> 通过在组件标签上添加 key - value 属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>接收数据：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">只接收：</span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">限制类型：</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第三种方式（限制类型、限制必要性、指定默认值）：</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">  <span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">String</span>,<span class="comment">//类型</span></span><br><span class="line">    <span class="attr">required</span>:<span class="literal">true</span>,<span class="comment">//必要性</span></span><br><span class="line">    <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span><span class="comment">//默认值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon"><p>备注：<br>
props只是只读，Vue 底层会检测你对 props 的修改，如果进行了修改，就会发出警告；<br>
若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据。</p>
</div>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 第三弹 —— 事件总线、插槽</title>
    <url>/2021/10/26/learnVueAgain-3/</url>
    <content><![CDATA[<h1>mixin 混入</h1>
<p>功能：可以把多个组件公用的配置提取成一个混入对象。</p>
<p><strong>定义混合</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;...&#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用混合</strong></p>
<p>全局混入：<code>Vue.mixin(xxx)</code><br>
局部混入：<code>mixins:['xxx']</code></p>
<h1>插件</h1>
<p>功能：用于增强 Vue</p>
<p>本质：包含一个 install 方法的对象，install 的第一个参数是 Vue，第二个以后的参数是插件的使用者传递的数据。</p>
<span id="more"></span>
<p><strong>定义插件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue,options</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1. 添加全局过滤器</span></span><br><span class="line">  Vue.filter(...)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. 添加全局指令</span></span><br><span class="line">  Vue.directive(...)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3. 配置全局混入</span></span><br><span class="line">  Vue.mixin(...)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">  Vue.prototype.$myProperty = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用插件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.use()</span><br></pre></td></tr></table></figure>
<h1>scoped 样式</h1>
<p>作用：让样式在局部生效，防止冲突。</p>
<p>写法：<code>&lt;style scoped&gt;</code></p>
<h1>TodoList 案例</h1>
<p><strong>组件化编码流程</strong></p>
<ol>
<li>
<p>拆分静态组件：组件按功能点拆分，命名不要与 html 元素冲突。</p>
</li>
<li>
<p>实现动态组件：考虑好数据存放的位置，数据是一个组件在用，还是一些组件在用：</p>
<pre><code> 一个组件在用：放在组件自身即可
 一些组件在用：放在他们共同的父组件上（状态提升）
</code></pre>
</li>
<li>
<p>实现交互：从绑定事件开始。</p>
<pre><code> props 使用场景：
 父组件==&gt;子组件 通信
 子组件==&gt;父组件 通信（要求 父先给子一个函数）
</code></pre>
</li>
</ol>
<div class="note warning no-icon"><p>使用 v-model 时要切记：v-model 绑定的值不能是 props 传过来的值，因为 props 是不可以修改的！<br>
props 传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但是不推荐这样做。</p>
</div>
<h3 id="webStorage">webStorage</h3>
<p>存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）<br>
浏览器端通过 <code>Window.localStorage</code> 和 <code>Window.sessionStorage</code> 属性来实现本地存储机制。</p>
<p><strong>相关 API</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xxxxxStorage.setItem(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;value&#x27;</span>) </span><br><span class="line"><span class="comment">// 该方法接受一个 **键** 和 **值** 作为参数，会把键值对 **添加** 到存储中，如何键名存在，则 **更新** 其对应的值。</span></span><br><span class="line"></span><br><span class="line">xxxxxStorage.getItem(<span class="string">&#x27;key&#x27;</span>) <span class="comment">//该方法接受一个 **键名** 作为参数，返回键名对应的值。</span></span><br><span class="line"></span><br><span class="line">xxxxxStorage.removeItem(<span class="string">&#x27;key&#x27;</span>) <span class="comment">// 该方法接受一个 **键名** 作为参数，并把该键名从浏览器中删除。</span></span><br><span class="line"></span><br><span class="line">xxxxxStorage.clear() <span class="comment">// 该方法会 **清空** 存储中的所有数据。</span></span><br></pre></td></tr></table></figure>
<div class="note info no-icon"><p>备注：</p>
<ol>
<li>sessionStorage 存储的内容会随着浏览器窗口关闭而消失。</li>
<li>localStorage 存储的内容，需要手动清除才会消失。</li>
<li>xxxxxStorage.getItem(xxx) 如果 xxx 对应的 value 获取不到，则 getItem 的返回值是 null。</li>
<li>JSON.parse(null) 的结果依然是 null。</li>
</ol>
</div>
<h3 id="组件自定义事件-emit">组件自定义事件 emit</h3>
<p>一种组件间的通信方式，适用于：子组件 ===&gt; 父组件</p>
<p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（事件的回调在 A 中）</p>
<p><strong>绑定自定义事件</strong></p>
<p>第一种方式，在父组件中:</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Demo @atguigu=<span class="string">&quot;test&quot;</span>/&gt;</span><br><span class="line">或 </span><br><span class="line">&lt;Demo v-on:atguigu=<span class="string">&quot;test&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>第二种方式，在父组件中：</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Demo ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$refs.xxx.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="built_in">this</span>.test)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code> 1. 若想让事件只触发一次可以使用 once 修饰符 或 $once 方法
 2. 触发自定义事件：this.$emit('atguigu',数据)
 3. 解绑自定义事件：this.$off('atguigu')
 4. 组件上也可以绑定原生 DOM 事件，需要使用 native 修饰符。
</code></pre>
<div class="note warning no-icon"><p>注意：通过 this.$refs.xxx.$on(‘atguigu’,回调) 绑定自定义事件时，回调要么配置在 methods 中，要么用箭头函数，否则 this 的指向会出问题。</p>
</div>
<h3 id="全局事件总线-bus">全局事件总线 $bus</h3>
<p>一种组件间通信方式，适用于任意组件间通信。</p>
<p><strong>安装全局事件总线</strong></p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Vue.prototype.$bus = <span class="built_in">this</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>使用事件总线</strong></p>
<p>接收数据：A 组件想要接收数据，则在 A 组件中给 $bus 绑定自定义事件，事件的回调留在 A 组件自身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="built_in">this</span>.demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p>
<div class="note info no-icon"><p>最好在 beforeDestroy 钩子中，用 $off 去解绑当前组件所用到的事件。</p>
</div>
<h3 id="消息订阅与发布-pubsub">消息订阅与发布 pubsub</h3>
<p>一种组件间通信方式，适用于任意组件间通信。</p>
<p><strong>使用步骤：</strong></p>
<ol>
<li>安装 pubsub：npm i pubsub-js</li>
<li>引入：import pubsub from ‘pubsub-js’</li>
<li>接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的回调留在 A 组件自身。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;...&#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.pid = pubsub.subscribe(<span class="string">&#x27;xxx&#x27;</span>,<span class="built_in">this</span>.demo)<span class="comment">//订阅消息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>提供数据：pubsub.publish(‘xxx’,数据)</li>
<li>最好在 beforeDestroy 钩子中，用 Pubsub.unsubscribe(pid) 去取消订阅。</li>
</ol>
<h3 id="Vue-脚手架配置代理">Vue 脚手架配置代理</h3>
<p><strong>方法一</strong></p>
<p>在 vue.config.js 中添加如下配置：</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>说明：
1. 优点：配置简单，请求资源时直接发给前端（8080）即可。
2. 缺点：不能配置多个代理，不能灵活地控制是否走代理。
3. 工作方式：若按照上述配置代理，若请求了前端不存在地资源时，那么该请求会转发给服务器（即优先匹配前端资源）。
</code></pre>
<p><strong>方法二</strong></p>
<p>编写 vue.config.js 配置具体代理规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">proxy</span>:&#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>:&#123; <span class="comment">//匹配所有以 &#x27;/api&#x27; 开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">//目标代理服务器</span></span><br><span class="line">        <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>:&#123; <span class="comment">//匹配所有以 &#x27;/api&#x27; 开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5001&#x27;</span>, <span class="comment">//目标代理服务器</span></span><br><span class="line">        <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api2&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  changeOrigin 设置为 <span class="literal">true</span> 时，服务器收到的请求头 hosts 为：localhost:<span class="number">5000</span></span><br><span class="line">  changeOrigin 设置为 <span class="literal">false</span> 时，服务器收到的请求头 hosts 为：localhost:<span class="number">8080</span></span><br><span class="line">  changeOrigin 的默认值为 <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<pre><code>说明：
1. 优点：可以配置多个代理，且可以灵活地控制请求是否走代理。
2. 缺点：配置略繁琐，请求资源时必须加前缀。
</code></pre>
<h3 id="插槽-slot">插槽 slot</h3>
<p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 父组件 ===&gt; 子组件</p>
<p>分类：默认插槽、具名插槽、作用域插槽</p>
<p><strong>默认插槽</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">父组件中:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Catagory</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Catagory</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">子组件中:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--定义插槽--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>具名插槽</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">父组件中:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Catagory</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Catagory</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">子组件中:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--定义插槽--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>作用域插槽</strong></p>
<p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games 的数据在 Catagory 组件中，但使用数据所遍历出的结构由 App 组件决定）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">父组件中:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Catagory</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--生成的是 ul 列表 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopedData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Catagory</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Catagory</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;&#123;games&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--生成的是 ul 列表 --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;g in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Catagory</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">子组件中:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--定义插槽--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>:<span class="string">&#x27;Catagory&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 第四弹 —— Vuex、Vue-router</title>
    <url>/2021/11/04/learnVueAgain-4/</url>
    <content><![CDATA[<h1>Vuex</h1>
<ol>
<li>
<p><strong>概念</strong><br>
在 Vue 中实现集中式数据管理的一个 Vue 插件，对 vue 应用中多个组件共享数据进行集中式管理（读/写），也是一种组件间通信方式，且适用于任意组件间通信。</p>
</li>
<li>
<p><strong>何时使用</strong><br>
多个组件需要共享数据时。</p>
</li>
<li>
<p><strong>搭建 vuex 环境</strong><br>
创建文件 src/store/index.js</p>
</li>
</ol>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 vue 核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用 vuex 插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备 actions 对象——相应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备 mutations 对象——修改 state 中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备 state 对象——保存数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露 store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store = &#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 main.js 中，创建 vm 时传入 store 配置项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>:<span class="function"><span class="params">h</span>=&gt;</span>h(App),</span><br><span class="line">  store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>基本使用</strong><br>
初始化数据，配置<code>actions</code>、配置<code>mutations</code>、操作文件<code>store.js</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue 核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用 Vuex 插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 响应组件中加的请求</span></span><br><span class="line">  <span class="function"><span class="title">jia</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;action 中的 jia 被调用了&#x27;)</span></span><br><span class="line">    context.commit(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// 执行加</span></span><br><span class="line">  <span class="function"><span class="title">JIA</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;mutation 中的 JIA 被调用了&#x27;)</span></span><br><span class="line">    state.sum += value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>组件中读取 vuex 中的数据：<code>this.$store.state.sum</code><br>
组件中修改 vuex 中的数据：<br>
<code>this.$store.dispatch('actions 中的方法名',数据)</code> 或 <code>this.$store.commit('mutations 中的方法名',数据)</code></p>
<p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写 dispatch，直接编写 commit</p>
<ol start="5">
<li><strong>getters 的使用</strong><br>
概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。<br>
在 <code>store.js</code> 中追加 <code>getters</code> 配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露 store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  ...</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>组件中读取数据：<code>this.$store.getters.bigSum</code></p>
<ol start="6">
<li><strong>mapXxx 的使用</strong><br>
mapState 方法：用于帮助我们映射 state 中的数据为计算属性。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="comment">// 借助 mapState 生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">  ...mapState(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 借助 mapState 生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">  ...mapState([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mapGetters 方法：用于帮助我们映射 getters 中的数据为计算属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="comment">// 借助 mapGetters 生成计算属性：bigSum（对象写法）</span></span><br><span class="line">  ...mapGetters(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 借助 mapGetters 生成计算属性：bigSum（数组写法）</span></span><br><span class="line">  ...mapGetters([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mapActions 方法：用于帮助我们生成与 actions 对话的方法，即包含 <code>this.$store.dispatch(xxx)</code> 的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="comment">// 靠 mapActions 生成：incrementAdd、incrementWait（对象形式）</span></span><br><span class="line">  ...mapActions(&#123;<span class="attr">incrementAdd</span>:<span class="string">&#x27;jiaAdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 靠 mapActions 生成：incrementAdd、incrementWait（数组形式）</span></span><br><span class="line">  ...mapActions([<span class="string">&#x27;jiaAdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mapMutations 方法：用于帮助我们生成与 mutations 对话的方法，即：包含 <code>this.$store.commit(xxx)</code> 的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="comment">// 靠 mapMutations 生成：increment、decrement（对象形式）</span></span><br><span class="line">  ...mapMutations(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 靠 mapMutations 生成：increment、decrement（数组形式）</span></span><br><span class="line">  ...mapMutations([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon"><p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p>
</div>
<h1>路由</h1>
<p>理解：一个路由（route）就是一组映射关系（key-value），多个路由需要路由器（router）进行管理。对 Vue-router 而言，此处的 key 是 url 路径，value 是组件。</p>
<h4 id="一、基本使用">一、基本使用</h4>
<ol>
<li>安装 vue-router，命令：npm i vue-router</li>
<li>应用插件 Vue.use(VueRouter)</li>
<li>编写 router 配置项</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 VueRouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入 layout 组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 router 实例对象，去管理一组一组的路由规则。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="string">&#x27;About&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="string">&#x27;Home&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>
<p>实现切换（active-class 可配置高亮样式）<br>
<code>&lt;router-link to=&quot;/about&quot; active-class=&quot;active&quot;&gt;About&lt;/router-link&gt;</code></p>
</li>
<li>
<p>指定展示位置<br>
<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>
</li>
</ol>
<div class="note info no-icon"><p>几个注意点</p>
<ol>
<li>路由组件通常存放在 page 文件夹，一般组件通常存放在 components 文件夹。</li>
<li>通过切换隐藏了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>
<li>每个组件都有自己的 $route 属性，里面存储着自己的路由信息。</li>
<li>整个应用只有一个 router，可以通过组件的 $router 属性来获取到。</li>
</ol>
</div>
<h4 id="二、多级路由（嵌套路由）">二、多级路由（嵌套路由）</h4>
<ol>
<li>配置路由规则，使用 children 配置项</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:About</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:Home,</span><br><span class="line">    <span class="attr">children</span>:[ <span class="comment">//通过 children 配置子级路由</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">        <span class="attr">component</span>:News</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>, <span class="comment">//此处一定不要写：/message</span></span><br><span class="line">        <span class="attr">component</span>:Message</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>跳转（要写完整路径）<br>
<code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></li>
</ol>
<h4 id="三、路由的-query-参数">三、路由的 query 参数</h4>
<p><strong>传递参数</strong><br>
跳转并携带 query 参数，to 的字符串写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;`/home/message/detail?id=$&#123;detail.id&#125;&amp;title=$&#123;detail.title&#125;`&quot;</span>&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p>跳转并携带 query 参数，to 的对象写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link&gt;</span><br><span class="line">  :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    path:&#x27;/home/message/detail&#x27;,</span></span><br><span class="line"><span class="string">    query:&#123;</span></span><br><span class="line"><span class="string">      id:666,</span></span><br><span class="line"><span class="string">      title:&#x27;你好&#x27;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&quot;</span></span><br><span class="line">跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p><strong>接收参数</strong><br>
<code>this.$route.query.id</code><br>
<code>this.$route.query.title</code></p>
<h4 id="四、命名路由">四、命名路由</h4>
<p>作用：给路由命名，可以简化路由的跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:Demo,</span><br><span class="line">  <span class="attr">children</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:Test,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>, <span class="comment">//给路由命名</span></span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>:Hello</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简化前，需要写完整的路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/demo/test/welcome&quot;</span>&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p>简化后，直接通过名字跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;</span>&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p>简化写法配合传递参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag"><span class="attr">:to</span>=<span class="string">&#123;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name:</span>&#x27;<span class="attr">hello</span>&#x27;,</span></span><br><span class="line"><span class="tag">  <span class="attr">query:</span>&#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">id:666</span>,</span></span><br><span class="line"><span class="tag">    <span class="attr">title:</span>&#x27;你好&#x27;</span></span><br><span class="line"><span class="tag">  &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="五、路由的-params-参数">五、路由的 params 参数</h4>
<p><strong>配置路由，声明接收 params 参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:Home,</span><br><span class="line">  <span class="attr">children</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:News</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">component</span>:Message,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收 params 参数</span></span><br><span class="line">          <span class="attr">component</span>:Detail</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>传递参数</strong></p>
<p>跳转并携带 params 参数（to 的字符串写法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/home/message/detail/666/你好啊&quot;</span>&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p>跳转并携带 params 参数（to 的对象写法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link </span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">  name:&#x27;xiangqing&#x27;,</span></span><br><span class="line"><span class="string">  params:&#123;</span></span><br><span class="line"><span class="string">    id:666,</span></span><br><span class="line"><span class="string">    title:&#x27;你好啊&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<div class="note warning no-icon"><p>特别注意：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p>
</div>
<p><strong>接收参数</strong><br>
<code>this.$route.params.id</code><br>
<code>this.$route.params.title</code></p>
<h4 id="六、路由的-props-配置">六、路由的 props 配置</h4>
<p>作用：让路由组件更方便的收到参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:Detail,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第一种写法：props 值为对象，该对象中所有 key-value 的组合最终都会通过 props 传给 Detail 组件（只能传递死数据）</span></span><br><span class="line">  <span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//第二种写法：props 值为布尔值，布尔值为 true，则把路由收到的所有 params 参数通过 props 传给 Detail 组件</span></span><br><span class="line">  <span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//第三种写法：props 值为函数，该函数返回的对象中所有 key-value 都会通过 props 传给 Detail 组件</span></span><br><span class="line">  <span class="function"><span class="title">props</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">id</span>:route.query.id,</span><br><span class="line">      <span class="attr">title</span>:route.query.title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="七、-router-link-的-replace-属性">七、<code>&lt;router-link&gt;</code> 的 replace 属性</h4>
<ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式。</li>
<li>浏览器的历史记录有两种写入模式：分别为 push 和 replace，push 是追加历史记录，replace 是替换当前记录。路由跳转时默认为 push</li>
<li>如何开启 replace 模式：<code>&lt;router-link replace ....&gt;&lt;/router-link&gt;</code></li>
</ol>
<h4 id="八、编程式路由导航">八、编程式路由导航</h4>
<p>作用： 不借助 <code>&lt;router-link&gt;</code> 实现路由跳转，让路由跳转更灵活</p>
<p><strong>具体编码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $router 的两个 API</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:xxx,</span><br><span class="line">    <span class="attr">title</span>:xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:xxx,</span><br><span class="line">    <span class="attr">title</span>:xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">//前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">//后退</span></span><br><span class="line"><span class="built_in">this</span>.$router.go(数字) <span class="comment">//可前进可后退</span></span><br></pre></td></tr></table></figure>
<h4 id="九、缓存路由组件">九、缓存路由组件</h4>
<p>作用：让不展示的路由组件保持挂载，不销毁</p>
<p><strong>具体编码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;News&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>
<p><strong>缓存多个路由组件</strong><br>
<keep-alive :include="['News','Message']"></keep-alive></p>
<div class="note warning no-icon"><p>注意：include 中填写组件名！</p>
</div>
<h4 id="十、路由守卫">十、路由守卫</h4>
<p>作用：对路由进行权限控制。<br>
分类：全局守卫、独享守卫、组件内守卫。</p>
<p><strong>全局守卫</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行，每次路由切换前执行</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;<span class="comment">// 权限控制的具体规则</span></span><br><span class="line">      next() <span class="comment">//放行</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;暂无权查看&#x27;</span>)</span><br><span class="line">      <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    next() <span class="comment">//放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.meta.title)&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>独享守卫</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.meta.isAuth)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;无权查看&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>组件内守卫</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="十一、路由器的两种工作模式">十一、路由器的两种工作模式</h4>
<p>对于一个 url 来说，什么是 hash 值？—— # 及其后面的内容就是 hash 值<br>
hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</p>
<p><strong>hash 模式</strong></p>
<ol>
<li>地址中永远带着 # 号，不美观。s</li>
<li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li>
<li>兼容性较好</li>
</ol>
<p><strong>history 模式</strong></p>
<ol>
<li>地址干净，美观。</li>
<li>兼容性和 hash 模式相比略差</li>
<li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</li>
</ol>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 vue3 写一个登录页</title>
    <url>/2021/08/05/login-practise/</url>
    <content><![CDATA[<h1>前言</h1>
<p>对初学 web 前端的人来说，一个登录页面可能会是他们前端打怪生涯中的最初遇到的几个 Boss 之一。几乎任何系统都需要登录功能，因为登录功能是系统实现身份认证和访问控制的第一步。</p>
<p>很久以前，前端大牛们写一个登录页，都是新建一个 html 文件手撸一遍页面模板，新建一个 css 文件手撸一遍页面样式，再新建一个 js 文件手撸一遍登录逻辑。而现在，这种方式显得十分古老。我作为一个初探前端的新手，在经历各种尝试后，给大家介绍如何使用 vite+vue3+<ruby> typescript<rt>anyscript </rt></ruby> 写一个登录页。</p>
<h1>介绍登录</h1>
<p>一个登录页中应该有什么，这应该是很多初学者需要面对的问题。在我看来，完成一次登录需要以下几个步骤：</p>
<blockquote>
<ol>
<li>对于未持有令牌的匿名访客，只能允许其访问公共页面，否则跳转登录页。</li>
<li>在登录页中提交身份认证的信息，例如账号、密码。</li>
<li>后端通过后，返回一个标识身份的令牌，例如 token。</li>
<li>使用令牌从后端获取用户信息，例如角色、权限。</li>
<li>通过角色、权限为用户量身定做一个路由表。</li>
<li>用户可以自由访问所给路由表中的全部网页</li>
</ol>
</blockquote>
<span id="more"></span>
<p>根据以上6步，我总结了以下使用 vue3 编写登录功能所涉及到的知识：</p>
<div class="note info no-icon"><ol>
<li>写一个靓靓的登录页（html+css）</li>
<li>异步请求相关知识（axios）</li>
<li>前端路由的相关知识（vue-route）</li>
<li>模拟后端数据（mock）</li>
<li>全局状态管理（vuex，例子用的是 pinia）</li>
</ol>
</div>
<p>这里给出 vue3 项目配置的小纸条——<a href="/2021/07/15/learnVue3/" title="是时候学习 vue3 了">是时候学习 vue3 了</a></p>
<h1>一个靓靓的登录页</h1>
<p>不要觉得代码很多，这个登录页除了2个输入框和一个提交按钮外，其他都是样式相关的代码。</p>
<p>简单地说，就是通过 vue 的 v-model 指令，我们实现了2个输入框和变量的双向绑定。然后我们编写按钮事件，调用 doLogin 将2个输入框的内容传入作为参数。然后在回调中反馈登录的状态。</p>
<p>文件名：<code>@/components/Login.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-head&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-yonghu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-mima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-access&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>do you access the services ?<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-action btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-or&quot;</span>&gt;</span>OR<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-action btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login with twitter&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login10-container-signup&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>don&#x27;t have account ? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>sign up<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineComponent, ref, reactive, toRefs, onBeforeMount, onMounted, isReactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; useLayoutStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/modules/layout&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span></span></span><br><span class="line"><span class="javascript">interface DataProps &#123;&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> layoutStore = useLayoutStore()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> form = reactive(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> onSubmit = <span class="keyword">async</span>()=&gt;&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> &#123; username, password &#125;  = form</span></span><br><span class="line"><span class="javascript">          layoutStore.doLogin(&#123;username,password&#125;).then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="built_in">console</span>.log(<span class="string">&#x27;登录成功&#x27;</span>,layoutStore.getStatus.ACCESS_TOKEN)</span></span><br><span class="line"><span class="javascript">               router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">          &#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(e)</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            form,onSubmit</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&#x27;less&#x27;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.btn</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>:none;</span></span><br><span class="line"><span class="css">  <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-radius</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.login10</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>:<span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-family</span>: sans-serif;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  &amp;-bg&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>,<span class="built_in">rgba</span>(<span class="number">64</span>, <span class="number">115</span>, <span class="number">158</span>,<span class="number">1.0</span>),<span class="built_in">rgba</span>(<span class="number">39</span>, <span class="number">60</span>, <span class="number">117</span>,<span class="number">1.0</span>));</span></span><br><span class="line"><span class="css">    <span class="attribute">background-size</span>:cover;</span></span><br><span class="line"><span class="css">    <span class="attribute">z-index</span>:-<span class="number">100</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  &amp;-container&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">6</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>:<span class="number">60px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border-radius</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    //backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">3px</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">border-top</span>:<span class="number">2px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">border-left</span>:<span class="number">2px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">box-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>);</span></span><br><span class="line"><span class="css">    &amp;-head&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">40px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    &amp;-wrap&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">245</span>, <span class="number">246</span>, <span class="number">250</span>,<span class="number">1.0</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">border-radius</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>:grid;</span></span><br><span class="line"><span class="css">      grid-template-<span class="attribute">columns</span>:<span class="number">15%</span> <span class="number">86%</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">outline</span>:none;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:none;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>:none;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="css">        &amp;<span class="selector-pseudo">::placeholder</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">font-size</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">i</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    &amp;-access&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>:<span class="number">0</span> .<span class="number">4rem</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">justify-content</span>: flex-end;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>:<span class="number">8px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    &amp;-action&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    &amp;-or&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      &amp;:before,&amp;:after&#123;</span></span><br><span class="line"><span class="css">        content:<span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">        <span class="attribute">flex</span>:<span class="number">1</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>:auto;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    &amp;-signup&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      </span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>全局状态管理</h1>
<p>上面的登录页使用了 store。这是一个全局状态管理组件，通过这个组件，我们可以设置整个应用程序的通用状态。</p>
<p>比方说，登录就是一种状态，我们可以用一个布尔变量 isLogin 来标识某个访客是否登录了系统。不过我这里并没有这样做，因为目前比较流行的是使用 token 来标识一个访客的登录状态。只要拿到了 token，就表明该访客登录成功，我们需要的是使用 store 保存这个 token，以便在其他组件中取出并使用。</p>
<h3 id="下面使用-pinia-来做全局状态管理"><a href="#%E4%B8%8B%E9%9D%A2%E4%BD%BF%E7%94%A8-pinia-%E6%9D%A5%E5%81%9A%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86">下面使用 pinia 来做全局状态管理</a></h3>
<p>下面就是 pinia 的定义，前2个函数是构造路由的逻辑中分离出来的，先不用看。</p>
<p>从 state 中可以看出，我们管理的全局状态有：</p>
<blockquote>
<p>menuList：用来保存当前用户量身定做的路由。<br>
userInfo：用来保存用户权限。<br>
status：用来保存 ACCESS_TOKEN。</p>
</blockquote>
<p>我们先看一下 doLogin，这是 store 的一个 action，用来改变 state。我们在前面登录页中用到了它。登录页按下按钮，就会调用到 doLogin，从 login api 中取出登录状态并写入 state。</p>
<p>文件名：<code>@/store/modules/layout.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; constantRouterMap, asyncRouterMap &#125; <span class="keyword">from</span> <span class="string">&#x27;@/config/router.config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; login, getUser, UmsAdminLoginParam &#125; <span class="keyword">from</span> <span class="string">&#x27;@api/login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; setLocal, getLocal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/tools&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; ACCESS_TOKEN &#125; = getLocal&lt;IStatus&gt;(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span> (<span class="params">permission: any, route: any</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 没有meta.permission的路由，默认放行</span></span><br><span class="line">  <span class="keyword">if</span> (route.meta &amp;&amp; route.meta.permission) &#123;</span><br><span class="line">    <span class="comment">// 有meta.permission的路由，根据服务器给出的roles.permissionlist决定是否放行</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 遍历服务器获取到的roles.permissionList</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> permission)&#123;</span><br><span class="line">        flag = route.meta.permission.includes(p)</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// routerMap中的route全部遍历，然后通过hasPermission()来将某一个route.meta.permission和roles.permissionList所有元素比较</span></span><br><span class="line"><span class="comment">// 比较相同则留下，不同就会呗filter掉</span></span><br><span class="line"><span class="comment">// 最后留下的便是所属权限对应的路由</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRouter</span> (<span class="params">routerMap: any, roles: any</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> accessedRoutes = routerMap.filter(<span class="function">(<span class="params">route:any</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasPermission(roles.permission, route)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (route.children &amp;&amp; route.children.length) &#123;</span><br><span class="line">                <span class="comment">// 将filter后的路由重写回子路由</span></span><br><span class="line">                route.children = filterAsyncRouter(route.children, roles)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> accessedRoutes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useLayoutStore = defineStore(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;layout&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>:():<span class="function"><span class="params">ILayout</span> =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">menubar</span>: &#123;</span><br><span class="line">            <span class="attr">menuList</span>: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 用户信息</span></span><br><span class="line">        <span class="attr">userInfo</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">roles</span>: &#123;</span><br><span class="line">                <span class="attr">permission</span>:[]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">status</span>: &#123;</span><br><span class="line">            <span class="attr">ACCESS_TOKEN</span>: ACCESS_TOKEN || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        getMenubar():IMenubar &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.menubar</span><br><span class="line">        &#125;,</span><br><span class="line">        getUserInfo():IUserInfo &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.userInfo</span><br><span class="line">        &#125;,</span><br><span class="line">        getStatus():IStatus &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.status</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        setToken(token:string):<span class="keyword">void</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.status.ACCESS_TOKEN = token</span><br><span class="line">            setLocal(<span class="string">&#x27;token&#x27;</span>, <span class="built_in">this</span>.status, <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="title">doLogin</span>(<span class="params">loginParam: UmsAdminLoginParam</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> login(loginParam).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; token &#125; = response.data</span><br><span class="line">                <span class="keyword">if</span>(token)&#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; token &#125; = response.data</span><br><span class="line">                    <span class="built_in">this</span>.setToken(token)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> doGetUser():<span class="built_in">Promise</span>&lt;<span class="keyword">void</span>&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> getUser()</span><br><span class="line">            <span class="keyword">const</span> userInfo = res.data</span><br><span class="line">            <span class="built_in">this</span>.userInfo = userInfo</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="title">generateRoutes</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="built_in">this</span>.doGetUser()</span><br><span class="line">            <span class="keyword">const</span> roles = <span class="built_in">this</span>.userInfo.roles</span><br><span class="line">            <span class="keyword">const</span> accessedRoutes = filterAsyncRouter(asyncRouterMap,roles)</span><br><span class="line">            accessedRoutes.forEach(<span class="function">(<span class="params">r:any</span>) =&gt;</span> &#123;</span><br><span class="line">                router.addRoute(r)</span><br><span class="line">            &#125;)</span><br><span class="line">            constantRouterMap.slice().reverse().forEach(<span class="function"><span class="params">r</span> =&gt;</span> &#123;accessedRoutes.unshift(r)&#125;)</span><br><span class="line">            <span class="built_in">this</span>.menubar.menuList = accessedRoutes</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>还有上面用到的一些 localStorage 相关工具函数 setLocal 和 getLocal。</p>
<p>setLocal 用于将 token 存入 localStorage，而 getLocal 用于取出。</p>
<p>使用 localStorage 存储 token，不仅能在用户关闭浏览器后依然保存登录状态，而且还能管理 token 的生命时间。</p>
<div class="note warning"><p>代码中的 token 保存时间较长，在调试的时候记得安装清除浏览器缓存的插件或工具。</p>
</div>
<p>除此之外，还有2个和 url 的编码/解码相关工具函数。</p>
<p>文件名：<code>@/utils/tool.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localStorage设置有效期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>name localStorage设置名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 数据对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>pExpires 有效期(默认100年)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setLocal</span>(<span class="params">name:string, data:IObject&lt;any&gt;, pExpires = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span> * <span class="number">100</span></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  data.startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  data.expires = pExpires</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(name, <span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断localStorage有效期是否失效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>name localStorage设置名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">useLocal</span>(<span class="params">name: string</span>):<span class="title">Promise</span>&lt;<span class="title">ILocalStore</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> local = getLocal&lt;ILocalStore&gt;(name)</span><br><span class="line">        <span class="keyword">if</span>(local.startTime + local.expires &lt; <span class="built_in">Date</span>.now()) reject(<span class="string">`<span class="subst">$&#123;name&#125;</span>已超过有效期`</span>)</span><br><span class="line">        resolve(local)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二次编码url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">url: string</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">decodeURIComponent</span>(url))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二次解码url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params">url: string</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(<span class="built_in">encodeURIComponent</span>(url))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>登录相关 api 和 mock 模拟数据</h1>
<p>通过 api，前端应用可以使用异步请求服务器接口，并获得数据。</p>
<div class="note warning"><p>编写服务器程序不在本章考虑范畴，因此我们使用 mock 来代替服务器返回的数据。</p>
</div>
<p>以下是登录相关的 api。</p>
<p>文件名：<code>@/api/login.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request, service &#125; <span class="keyword">from</span> <span class="string">&#x27;@utils/axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">type UmsAdminParam = &#123;</span><br><span class="line">  <span class="attr">username</span>:string,</span><br><span class="line">  <span class="attr">password</span>:string,</span><br><span class="line">  icon?:string,</span><br><span class="line">  email?:string,</span><br><span class="line">  nickName?:string,</span><br><span class="line">  note?:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type UmsAdminLoginParam = &#123;</span><br><span class="line">  <span class="attr">username</span>:string,</span><br><span class="line">  <span class="attr">password</span>:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data:UmsAdminLoginParam</span>): <span class="title">Promise</span>&lt;<span class="title">AxiosResponse</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> service(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/admin/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">data:UmsAdminParam</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/admin/register&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">AxiosResponse</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> service(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/admin/user&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里是模拟服务器数据的 mock。</p>
<p>文件名：<code>mock/test.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/admin/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">(<span class="params">param:any</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> username = <span class="string">&#x27;sugar&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> password = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">username</span>:u, <span class="attr">password</span>:p &#125; = param.body</span><br><span class="line">      <span class="keyword">if</span>(u!==username || p!==password)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">data</span>:&#123;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">msg</span>:<span class="string">&#x27;账号或密码错误&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;sugar&#x27;</span>,</span><br><span class="line">          <span class="attr">token</span>: <span class="string">&#x27;4291d7da9005377ec9aec4a71ea837f&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/admin/user&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;sugar&#x27;</span>,</span><br><span class="line">          <span class="attr">roles</span>:&#123;</span><br><span class="line">            <span class="attr">permission</span>:[<span class="string">&quot;login&quot;</span>,<span class="string">&quot;login2&quot;</span>,<span class="string">&quot;login3&quot;</span>,<span class="string">&quot;login4&quot;</span>,<span class="string">&quot;article&quot;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">] <span class="keyword">as</span> MockMethod[]</span><br></pre></td></tr></table></figure>
<h3 id="路由前置守卫-beforeEach">路由前置守卫 beforeEach</h3>
<p>这是 vue-router 的一个钩子。所谓钩子，就是应用程序执行到某个阶段时调用的回调函数，用来提供拦截并添加额外代码。</p>
<p>如果把将 url 输入到地址栏比作入境，那么 beforeRouteEach 的身份就是海关，在你的 url 到达之前，必须检查你的身份，确定你是否满足条件访问。</p>
<p>这里有个技巧，就是将备用 url 藏在 query 中。因为访客在对当前登录状态不知情的状态下，可能会访问到需要权限的 url，此时我们就可以将此时被拦截的 url 当作备用保存，以便访客进行登录后直接帮他跳转。</p>
<blockquote>
<p>整体逻辑是：</p>
<ol>
<li>先判断当前是否正在访问登录页，根据当前 ACCESS_TOKEN 和 备用 url 重定向页面。</li>
<li>判断用户是否已登录，没有登录则将当前 url 设置成备用 url，然后重定向到登录页。</li>
<li>如果用户已登录，判断 localStorage 中的 ACCESS_TOKEN 是否已失效。</li>
<li>如果用户已登录且 token 未过期，则判断当前用户是否存在专属路由，没有则构造专属路由，然后重新访问一遍当前地址。</li>
</ol>
</blockquote>
<p>文件名：<code>@/permission.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; decode, encode &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/tools&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLayoutStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/modules/layout&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/tools&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loginRoutePath = <span class="string">&#x27;/login&#x27;</span></span><br><span class="line"><span class="keyword">const</span> defaultRoutePath = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;register&#x27;</span>]</span><br><span class="line">router.beforeEach(<span class="keyword">async</span>(to,<span class="keyword">from</span>)=&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> layoutStore = useLayoutStore()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**1、设置文档标题 */</span></span><br><span class="line">    <span class="comment">/**2、判断当前是否在登录页面 */</span></span><br><span class="line">    <span class="keyword">if</span> (to.path.toLocaleLowerCase() === loginRoutePath.toLocaleLowerCase()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(layoutStore.getStatus.ACCESS_TOKEN) <span class="keyword">return</span> <span class="keyword">typeof</span> to.query.from === <span class="string">&#x27;string&#x27;</span> ? decode(to.query.from) : defaultRoutePath</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**3、判断是否登录 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!layoutStore.getStatus.ACCESS_TOKEN) &#123;</span><br><span class="line">        <span class="keyword">return</span> loginRoutePath + (to.fullPath ? <span class="string">`?from=<span class="subst">$&#123;encode(to.fullPath)&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前端检查token是否失效</span></span><br><span class="line">    useLocal(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">d:any</span>) =&gt;</span> layoutStore.setToken(d.ACCESS_TOKEN))</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> layoutStore.logout())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否还没添加过路由</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(layoutStore.getMenubar.menuList.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> layoutStore.generateRoutes()</span><br><span class="line">        <span class="keyword">return</span> to.fullPath</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="构造用户专属路由">构造用户专属路由</h3>
<p>首先重新回顾一下2个 action：doGetUser 和 generateRoutes。</p>
<p>doGetUser 用于调用 api 获取用户权限信息 permission，然后保存到 state 中。generateRoutes 用于根据权限信息筛选出用户可以访问的路由。</p>
<p>将经过筛选的路由然后添加到 vue-router 中。</p>
<p>最后再把公共路由和生成的路由拼接形成用户路由保存到 state，用于对以后使用标签页时提供支持。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> doGetUser():<span class="built_in">Promise</span>&lt;<span class="keyword">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> getUser()</span><br><span class="line">    <span class="keyword">const</span> userInfo = res.data</span><br><span class="line">    <span class="built_in">this</span>.userInfo = userInfo</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">generateRoutes</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.doGetUser()</span><br><span class="line">    <span class="keyword">const</span> roles = <span class="built_in">this</span>.userInfo.roles</span><br><span class="line">    <span class="keyword">const</span> accessedRoutes = filterAsyncRouter(asyncRouterMap,roles)</span><br><span class="line">    accessedRoutes.forEach(<span class="function">(<span class="params">r:any</span>) =&gt;</span> &#123;</span><br><span class="line">        router.addRoute(r)</span><br><span class="line">    &#125;)</span><br><span class="line">    constantRouterMap.slice().reverse().forEach(<span class="function"><span class="params">r</span> =&gt;</span> &#123;accessedRoutes.unshift(r)&#125;)</span><br><span class="line">    <span class="built_in">this</span>.menubar.menuList = accessedRoutes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们回过头来看下从构造路由逻辑中分离出的2个函数。</p>
<p>它们的作用是比对每个路由中 meta.permission 是否在 userInfo.role.permission 数组中对应存在。如果不存在，则踢出路由表，从而实现用权限筛选路由。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span> (<span class="params">permission: any, route: any</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 没有meta.permission的路由，默认放行</span></span><br><span class="line">  <span class="keyword">if</span> (route.meta &amp;&amp; route.meta.permission) &#123;</span><br><span class="line">    <span class="comment">// 有meta.permission的路由，根据服务器给出的roles.permissionlist决定是否放行</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 遍历服务器获取到的roles.permissionList</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> permission)&#123;</span><br><span class="line">        flag = route.meta.permission.includes(p)</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// routerMap中的route全部遍历，然后通过hasPermission()来将某一个route.meta.permission和roles.permissionList所有元素比较</span></span><br><span class="line"><span class="comment">// 比较相同则留下，不同就会呗filter掉</span></span><br><span class="line"><span class="comment">// 最后留下的便是所属权限对应的路由</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRouter</span> (<span class="params">routerMap: any, roles: any</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> accessedRoutes = routerMap.filter(<span class="function">(<span class="params">route:any</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasPermission(roles.permission, route)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (route.children &amp;&amp; route.children.length) &#123;</span><br><span class="line">                <span class="comment">// 将filter后的路由重写回子路由</span></span><br><span class="line">                route.children = filterAsyncRouter(route.children, roles)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> accessedRoutes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>公共路由 constantRouterMap 和 动态路由 asyncRouterMap 的定义在配置目录中。</p>
<p>文件名：<code>@/config/router.config.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@c/login10.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRouterMap = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;MainLayout&#x27;</span>,</span><br><span class="line">      <span class="attr">redirect</span>:<span class="string">&#x27;/article&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/layout/MainLayout.vue&#x27;</span>),</span><br><span class="line">      <span class="attr">children</span>:[&#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;article&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;article&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@view/Article.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>:&#123;</span><br><span class="line">            <span class="attr">permission</span>:[<span class="string">&#x27;article&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>然后是 vue-router 的配置</p>
<p>文件名：<code>@/router/index.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, Router, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; constantRouterMap &#125; <span class="keyword">from</span> <span class="string">&#x27;@/config/router.config&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由模式</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">  <span class="attr">routes</span>: constantRouterMap <span class="keyword">as</span> <span class="built_in">Array</span>&lt;RouteRecordRaw&gt;,</span><br><span class="line">  <span class="function"><span class="title">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<h1>结语</h1>
<p>文件结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">`-- myvue3</span><br><span class="line">    |-- mock</span><br><span class="line">    |   `-- test.ts</span><br><span class="line">    `-- src</span><br><span class="line">        |-- api</span><br><span class="line">        |   `-- login.ts</span><br><span class="line">        |-- components</span><br><span class="line">        |   `-- Login10.vue</span><br><span class="line">        |-- config</span><br><span class="line">        |   `-- router.config.ts</span><br><span class="line">        |-- permission.ts</span><br><span class="line">        |-- router</span><br><span class="line">        |   `-- index.ts</span><br><span class="line">        |-- store</span><br><span class="line">        |   |-- index.ts</span><br><span class="line">        |   `-- modules</span><br><span class="line">        |       `-- layout.ts</span><br><span class="line">        `-- utils</span><br><span class="line">            `-- tools.ts</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3.2 —— setup script</title>
    <url>/2021/11/04/vue3-setupscript/</url>
    <content><![CDATA[<h3 id="Script-setup-语法糖下-组件-的使用">Script setup 语法糖下 组件 的使用</h3>
<ol>
<li>自动的组件名推断<br>
Vue 会依据它的<strong>文件名</strong>来自动推断组件名称<br>
通过普通 <code>&lt;setup&gt;</code> 标签可以显式更改组件名称(不推荐)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>普通组件的使用<br>
不再需要 components 注册，引入直接使用。<br>
原理：setup script 在编译的时候把 template 的内容变成 vNode 后继而由 setup 函数中返回。</li>
</ol>
<span id="more"></span>
<ol start="3">
<li>
<p>动态组件<br>
和 Vue2 相同<br>
<component :is="Bar"/></p>
</li>
<li>
<p>递归组件<br>
名为 <code>Foo.vue</code> 的组件可以在其模板中用 <code>&lt;Foo/&gt;</code> 引用它自己</p>
</li>
<li>
<p>命名空间组件<br>
<code>Components/index.ts</code> 用于导出组件<br>
<code>index.vue</code> 基于命名组件使用组件</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&#x27;ts&#x27;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Form <span class="keyword">from</span> <span class="string">&#x27;../Components&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Form.Foo&gt;</span><br><span class="line">  &lt;Form.Bar&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Script-setup-语法糖下-props-的使用">Script setup 语法糖下 props 的使用</h3>
<ol>
<li>props 的使用 ———— defineProps</li>
</ol>
<ul>
<li>
<p>运行时声明和类型声明<br>
运行时声明会在运行后给出提示，是 Vue 提供给我们的。<br>
缺点：无法对数组中的对象进行校验。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">defineProps:&#123;</span><br><span class="line">  <span class="attr">height</span>:<span class="built_in">Number</span>,</span><br><span class="line">  <span class="attr">title</span>:<span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类型声明基于 ts 类型检查，可在编译时类型检查</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">height</span>:number</span><br><span class="line">  title?:string</span><br><span class="line">  <span class="attr">list</span>:&#123;<span class="attr">id</span>:number,<span class="attr">content</span>:string&#125;[]</span><br><span class="line">&#125;&gt;() </span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>
<p>Compiler Macros（编译时宏命令）<br>
<code>&lt;setup script&gt;</code> 在运行前会经过一个编译的过程，这个语法糖提供了一系列宏命令供开发者使用，在编译阶段会进行替换。</p>
</li>
<li>
<p>props 的默认值 ———— withDefaults<br>
类型声明可以用 ? 来确定 props 是否 require，但是没有决定默认值的语法。</p>
</li>
</ol>
<ul>
<li>基本用法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = withDefaults(definedProps&lt;&#123;</span><br><span class="line">  title?:string,</span><br><span class="line">  <span class="attr">list</span>:&#123;<span class="attr">id</span>:number,<span class="attr">content</span>:string&#125;</span><br><span class="line">&#125;&gt;(),&#123;</span><br><span class="line">  <span class="attr">title</span>:<span class="string">&#x27;类型声明的默认值&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Script-setup-语法糖下-emit-的使用">Script setup 语法糖下 emit 的使用</h3>
<ol>
<li>
<p>自定义事件的使用 defineEmits<br>
普通写法和类型声明式<br>
普通写法对传参没有类型提示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emits = defineEmits([<span class="string">&#x27;parentClick&#x27;</span>,<span class="string">&#x27;parentChange&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>类型声明基于 ts 类型检查，可在编译时类型检查</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emits = defineEmits&lt;&#123;</span><br><span class="line">  <span class="function">(<span class="params">e:<span class="string">&#x27;parentClick&#x27;</span>,data:number</span>)=&gt;</span><span class="keyword">void</span>,</span><br><span class="line">  <span class="function">(<span class="params">e:<span class="string">&#x27;parentChange&#x27;</span></span>)=&gt;</span><span class="keyword">void</span></span><br><span class="line">&#125;&gt;()</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>显示暴露 ———— defineExpose<br>
在 setup script 中，默认情况下无法通过 ref 来获取子组件的属性和方法，需要通过 defineExpose 宏命令显式暴露出子组件的属性和方法。<br>
单独暴露</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">defineExpose(&#123;</span><br><span class="line">  count,</span><br><span class="line">  handle</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>全部暴露(普通 <code>&lt;sripct&gt;</code> 下书写)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Script-setup-和-普通-script-一起使用">Script setup 和 普通 script 一起使用</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 普通 script 在模块范围下执行（只执行一次）</span></span><br><span class="line">runSideEffectOnce()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明额外的选项（会被迫暴露组件，打破 script setup 的默认关闭）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;Bar&#x27;</span> <span class="comment">// 显式声明组件名</span></span><br><span class="line">  <span class="attr">inheritAttrs</span>:<span class="literal">false</span></span><br><span class="line">  <span class="attr">customOptions</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 在 setup() 作用域中执行（对每个实例皆是如此）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
