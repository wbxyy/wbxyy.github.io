<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="使用注音语法">使用注音语法</h3>
<h4 id="更换Hexo默认Markdown-Renderer">更换Hexo默认Markdown Renderer</h4>
<p>1.删除默认markdown渲染器<br>
2.下载另一个markdown渲染器<br>
3.下载ruby注音插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn remove hexo-renderer-marked</span><br><span class="line">yarn add hexo-renderer-markdown-it</span><br><span class="line">yarn add markdown-it-ruby</span><br></pre></td></tr></table></figure>
<h4 id="修改-config-yml">修改_config.yml</h4>
<p>在任何根位置填写：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ruby</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>first</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈typescript装饰器</title>
    <url>/2021/07/21/learnDescriptor1/</url>
    <content><![CDATA[<h1>浅谈typescript装饰器</h1>
<p>typescript的装饰器，是个很尴尬的存在，从这个概念被提出以来，就一直在经历各种规范上的修改，直到现在还没有一种公认、稳定的规范拿上台。</p>
<p>装饰器是和class的概念相关的，从尤大的话来说，前端页面的交互逻辑使用class来写，可能并不是那么顺手。从vue3放出的api来看，vue3最终还是选择了开放函数式编程的接口。用尤大的话来讲：设计一个class编程接口，要踩的坑实在是太多。</p>
<p>不过即使是冷门的语法，也阻止不了<ruby> 好奇<rt>得闲 </rt></ruby>的我去<ruby> 科研<rt>玩耍 </rt></ruby>一下。</p>
<h3 id="什么是装饰器">什么是装饰器</h3>
<p>说到装饰器，我们首先联想到的是css。在编写html文档时，我们使用css写好页面的样式，然后通过css选择器将这些样式绑定到html标签。</p>
<p>typescript的装饰器也是类似的使用方法，编写一个装饰器函数，然后通过@methodName将这个函数绑定到类、类的属性、类的方法。</p>
<p>它们的使用方法，有点像是做好一朵小红花，然后别在某个小朋友的衣领上一样，顾名思义装饰器。</p>
<span id="more"></span>
<h3 id="类属性装饰器">类属性装饰器</h3>
<p>typescript的属性装饰器，是指对类中的属性进行装饰，以代码入侵性较低的方式增强该属性。当我们使用类对象的属性时，完成我们自定义的额外功能。</p>
<p>下面是一个用es5风格编写的属性装饰器的例子，通过 <em><strong>Object.defineProperty</strong></em> 将类的普通属性改写成存取器属性，然后通过<ruby> Object accessor<rt>getter和setter </rt></ruby>拦截属性的基础操作，从而添加自定义的额外代码。</p>
<p>属性装饰器函数有固定的参数：target指被修饰的类，key指被修饰类的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">delete</span> target[key]</span><br><span class="line">  <span class="keyword">let</span> backing = <span class="string">&#x27;_&#x27;</span>+key</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target,backing,&#123;</span><br><span class="line">      <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">enumerable</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getter</span>(<span class="params"><span class="built_in">this</span>:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">this</span>.backing</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Get: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setter</span>(<span class="params"><span class="built_in">this</span>:any,newVal:any</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Set: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">      <span class="built_in">this</span>.backing = newVal</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target,key,&#123;</span><br><span class="line">      <span class="attr">get</span>:getter,</span><br><span class="line">      <span class="attr">set</span>:setter,</span><br><span class="line">      <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">enumerable</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">  @logProperty</span><br><span class="line">  name?:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e = <span class="keyword">new</span> Employee</span><br><span class="line">e.name<span class="comment">//&quot;Get: name =&gt; undefined&quot; </span></span><br><span class="line">e.name = <span class="string">&#x27;sugar&#x27;</span><span class="comment">//&quot;Set: name =&gt; sugar&quot; </span></span><br><span class="line">e.name<span class="comment">//&quot;Get: name =&gt; sugar&quot; </span></span><br></pre></td></tr></table></figure>
<p>我们使用es6风格的Proxy和Reflect重写一下看看，哈哈，我也不会写，毕竟我也是抄别人的。</p>
<h3 id="类装饰器">类装饰器</h3>
<p>类装饰器可以给一个类插入一个类方法。</p>
<p>我们创建一个什么都不写的空类：Greeter，然后使用类装饰器为这个空类添加一个方法：greet()</p>
<p>类装饰器只需要一个参数：target，指代被装饰的类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">        target.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`我是greet方法哒，没想到吧 !!`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Greeting</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter()</span><br><span class="line">greeter.greet()</span><br></pre></td></tr></table></figure>
<p>如果我们的装饰方法需要传递参数，那么可以使用下面的写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">greeting:string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">        target.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`我是greet方法哒，没想到吧! <span class="subst">$&#123;greeting&#125;</span> !!`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Greeting(<span class="string">&#x27;乾杯 - ( ゜- ゜)つロ&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter()</span><br><span class="line">greeter.greet()</span><br></pre></td></tr></table></figure>
<h3 id="类方法装饰器">类方法装饰器</h3>
<p>方法装饰器和属性装饰器相比，多了一个参数：descriptor，这个参数里记录了原函数的引用，用于调用原函数。</p>
<p>下面的例子中，我们通过改写descriptor.value将原来的方法替换成了新方法，并新增了日志功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类方法装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogMethod</span>(<span class="params">target:any,key:string,descriptor:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldMethod = descriptor.value</span><br><span class="line">    <span class="keyword">const</span> newMethod = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">this</span>:any,...args:any[]</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> result = oldMethod.call(<span class="built_in">this</span>,args)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.logOutput)&#123;</span><br><span class="line">            <span class="built_in">this</span>.logOutput = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;any&gt;()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.logOutput.push(&#123;</span><br><span class="line">            <span class="attr">method</span>:key,</span><br><span class="line">            <span class="attr">parameter</span>:args,</span><br><span class="line">            <span class="attr">result</span>:result,</span><br><span class="line">            <span class="attr">timestamp</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    descriptor.value = newMethod</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    @LogMethod</span><br><span class="line">    <span class="function"><span class="title">double</span>(<span class="params">num:number</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Calculator()</span><br><span class="line">c.double(<span class="number">2</span>)</span><br><span class="line">c.double(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c.logOutput)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[LOG]: [&#123;</span></span><br><span class="line"><span class="comment">  &quot;method&quot;: &quot;double&quot;,</span></span><br><span class="line"><span class="comment">  &quot;parameter&quot;: [</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment">  &quot;result&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;timestamp&quot;: &quot;2021-07-21T08:58:45.706Z&quot;</span></span><br><span class="line"><span class="comment">&#125;, &#123;</span></span><br><span class="line"><span class="comment">  &quot;method&quot;: &quot;double&quot;,</span></span><br><span class="line"><span class="comment">  &quot;parameter&quot;: [</span></span><br><span class="line"><span class="comment">    10</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment">  &quot;result&quot;: 20,</span></span><br><span class="line"><span class="comment">  &quot;timestamp&quot;: &quot;2021-07-21T08:58:45.706Z&quot;</span></span><br><span class="line"><span class="comment">&#125;] </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="结语">结语</h3>
<p>以上是3种常用装饰器的使用案例，typescript还有其他装饰器，这里就不列出了，因为笔者也只了解这3种。</p>
<p>本篇没有对装饰器做出足够详细的讲解，笔者也只懂这些，不足之处请多多包涵。</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈vue3响应式原理 第一篇 响应式和副作用</title>
    <url>/2021/07/19/learnReactivity1/</url>
    <content><![CDATA[<h1>浅谈vue3响应式原理 第一篇 响应式和副作用</h1>
<p>一年前，在开课吧的视频里看到winter、大圣还有尤大吹嘘着vue3，各种新名词映入眼帘：watchEffect，reactive，ref，当时觉得好牛逼啊，一定要学一下（咕咕咕）。</p>
<p>一年后，watchEffect是啥，reactive是啥，ref又是啥，怎么多了出了这么多东西，好难啊，趁现在赶紧摸索清楚。</p>
<h3 id="副作用">副作用</h3>
<p>我们经常能在尤大口中听到一个词：<code>sideEffect</code>。首次听这个词时，我也是一头雾水，副作用到底是什么，吃药时的副作用吗？在尤大在评论winter的小案例时，他讲了winter在组件销毁时没有清理掉之前设置的事件监听器，这会对程序产生副作用。当然，尤大此时说的是<code>sideEffect</code>是另一个方面的。</p>
<p>vue3中的<code>sideEffect</code>怎么理解？一些变量执行某些基本操作时，被拦截并执行一些事情，这些事情叫<code>sideEffect</code>。</p>
<span id="more"></span>
<h3 id="拦截">拦截</h3>
<p>上面说到拦截，这是vue经常做的事情。vue就喜欢在变量读取、写入的时候拦截并做操作。</p>
<p>在vue2中，尤大是通过<code>Object.defineProperty</code>给变量设置存取器属性，然后在存取器中执行副作用。到了vue3，尤大用了es6的新特性<code>Proxy</code>和<code>Reflect</code>重写了这部分的代码。<code>Proxy</code>提供了对变量基本操作的各种拦截回调，<code>Reflect</code>则是对这些基本操作的实现。通过<code>Proxy</code>，将变量的<strong>基本操作</strong>修改为<strong>副作用+基本操作</strong>，完成副作用的执行。</p>
<h3 id="响应式">响应式</h3>
<h4 id="响应式是什么">响应式是什么</h4>
<p>要明白响应式是什么，我们通过下面几行代码讲解</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> product = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">total = product.price * product.quantity <span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total <span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<p>上面代码表明了total是由price和quantity计算得出，但是当我们修改了quantity后，total的值却没有跟着变，因此我们知道原生的javascript是没有响应式的</p>
<h4 id="那么要怎么实现响应式">那么要怎么实现响应式</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> product = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;</span><br><span class="line">trigger()</span><br><span class="line">total <span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">trigger()</span><br><span class="line">total <span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>我们发现，如果我们将total的计算方式保存为一个函数，然后在每次更新quantity之后调用一次，total的值就会跟着变化。</p>
<p>那么只要我们在quantity更新时自动执行<code>trigger</code>，响应式就实现了。</p>
<h4 id="自动？">自动？</h4>
<p>要实现自动，我们就需要前面讲到的知识：<strong>拦截</strong>。</p>
<p>我们通过<code>Proxy</code>，在quantity执行<code>set</code>操作时进行拦截，然后将上述<code>trigger</code>添加为<code>set</code>操作的副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = <span class="keyword">new</span> <span class="built_in">Proxy</span>(p,&#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">    trigger()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">trigger()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>这下我们可以在<code>set</code>操作时自动执行<code>trigger</code>了</p>
<p>未完持续O(∩_∩)O</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈vue3响应式原理 第二篇 记录与重放</title>
    <url>/2021/07/19/learnReactivity2/</url>
    <content><![CDATA[<h1>浅谈vue3响应式原理 第二篇 记录与重放</h1>
<p>上一篇简单讲了一下什么是响应式，实现响应式的基本套路：在变量被设置新值的时候，重新执行一次副作用。</p>
<p>但是副作用有很多，我们不可能把每个副作用的执行都在<code>Proxy</code>中硬编码一遍，如何设计才能管理这么多副作用，这次来讲vue3实现响应式需要的数据结构。</p>
<h3 id="副作用的存储">副作用的存储</h3>
<p>要完成响应式，我们上一篇讲了在变量执行<code>set</code>操作时将副作用重放一遍。但是一个程序有这么多变量，这么多副作用，vue3是如何管理的呢？</p>
<p>首先这里引入一个<strong>新名词: depsMap</strong></p>
<p><code>depsMap</code>是一个绑定属性与副作用的<code>Map</code>。他的key是变量的属性名，他的value是属性对应的副作用。</p>
<p>一个属性不止一个副作用，因此value是一个<code>Set</code>，这样就能存储多个副作用。</p>
<p>我们给这个存储副作用的<code>Set</code>取一个<strong>新名字：dep</strong></p>
<p>由此可见，<code>dep</code>是<code>sideEffect</code>的集合。这样一来，我们就能管理整个对象的副作用了。</p>
<span id="more"></span>
<h3 id="record和playback">record和playback</h3>
<p>接下来我们要把上一篇的响应式代码魔改一下。</p>
<p>有了上面的结构，我们需要增加一个<strong>新方法：track</strong></p>
<p><strong>track</strong>的作用是把副作用存储到结构中，<strong>trigger</strong>的作用是从结构中找到副作用然后重放。</p>
<p>一个<strong>record</strong>，一个<strong>playback</strong>，是我们实现响应式的基本思路。</p>
<p>下面代码中通过<strong>track</strong>一步一步构造出<code>depsMap</code>和<code>dep</code>，构建出属性、副作用之间的关系。</p>
<p>当属性发生变更时，再通过<strong>trigger</strong>重放副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">track(<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">p.quantity = <span class="number">3</span></span><br><span class="line">trigger(<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<h3 id="管理多个对象">管理多个对象</h3>
<p>为了管理更多响应式对象，我们使用一个新的Map记录所有的响应式对象。</p>
<p>引入<strong>新名词：targetMap</strong></p>
<p><strong>targetMap</strong>是绑定对象和depsMap的<code>WeakMap</code>。他的key是对象，而value是depsMap。</p>
<p>这么一来，所有的对象都被记录在<code>targetMap</code>，每个对象都有自己的<code>depsMap</code>，每个<code>depsMap</code>都记录着对象的每个属性应该有哪些副作用。</p>
<p>加入<code>targetMap</code>之后，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">track(p,<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">p.quantity = <span class="number">3</span></span><br><span class="line">trigger(p,<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<h3 id="结合Proxy拦截实现自动track和trigger">结合Proxy拦截实现自动track和trigger</h3>
<p>以上面的代码为基础，我们将<strong>Proxy</strong>封装成<strong>reactive</strong>函数，实现“自动”启动<strong>track</strong>和<strong>trigger</strong>。</p>
<p><strong>reactive</strong>的作用是通过<strong>Proxy</strong>构造拦截器，把<strong>track</strong>和<strong>trigger</strong>两个方法放在<code>get,set</code>拦截器中调用。</p>
<p>因为执行<code>effect</code>时，会执行属性的读取，因此触发<strong>track</strong>将对象添加到<code>targetMap</code>，然后构建关联的<code>depsMap</code>，再构建<code>dep</code>存储当前<code>effect</code>。</p>
<p>后来为属性设置新值时，就会触发<strong>trigger</strong>将对应的副作用执行一遍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">      track(target,key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> oldVal = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">        trigger(target,key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<h3 id="限制track的执行">限制track的执行</h3>
<p>我们发现，程序中读取属性是非常普遍的操作，甚至在副作用中也会读取属性。这样很容易形成一个闭环：trigger-&gt;track-&gt;trigger-&gt;track-&gt;…</p>
<p>原因是执行<strong>trigger</strong>时，我们是在一个forEach循环里，而<strong>track</strong>的作用是往Set中添加副作用，这样导致了执行effect，然后添加effect,再执行刚刚添加的effect，再添加effect，最后递归下去没有出口。</p>
<p>我们下面添加一个控制变量<strong>activeEffect</strong>，让我们的<strong>track</strong>只在首次执行副作用时才被调用。</p>
<p>为此，我们重写了<code>effect</code>方法，<code>effect</code>不再是副作用，而是一个传入副作用的函数，里面不仅管理了<code>activeEffect</code>的状态，还调用了副作用本身。</p>
<p>我们还修改了<strong>track</strong>方法，当<code>activeEffect</code>有值时，才会往下执行,并且最后<code>dep</code>添加的是<code>activeEffect</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> activeEffect:any = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!activeEffect)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">      track(target,key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> oldVal = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">        trigger(target,key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">eff:any</span>)</span>&#123;</span><br><span class="line">  activeEffect = eff</span><br><span class="line">  activeEffect()</span><br><span class="line">  activeEffect = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>未完持续O(∩_∩)O</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈vue3响应式原理 第三篇 ref、computed</title>
    <url>/2021/07/21/learnReactivity3/</url>
    <content><![CDATA[<h1>浅谈vue3响应式原理 第三篇 ref、computed</h1>
<p>能够坚持看到这里，实属不易，vue3响应式的原理在前两篇已经讲得差不多了。</p>
<p>本篇作为一个补充，结合前面的内容，带大家了解vue3开放的2个api：</p>
<blockquote>
<p>ref函数和computed函数</p>
</blockquote>
<h3 id="ref和computed的由来">ref和computed的由来</h3>
<p>回想起上一篇，我们把<strong>Proxy</strong>封装成了<strong>Reactive函数</strong></p>
<p>通过它，我们对对象的<strong>读取、写入</strong>进行<strong>拦截</strong>，在拦截中插入<strong>记录</strong>和<strong>重放</strong>的操作，就能把普通的javascript对象变成响应式对象。</p>
<p>那么如果我们需要让javascript基本类型也实现响应式该怎么办呢？我们写一个ref函数。</p>
<span id="more"></span>
<h3 id="ref">ref</h3>
<p>这个ref函数期待接收一个<strong>基本类型</strong>，并借助<strong>reactive</strong>包一下，然后返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">raw:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = reactive(&#123;&#125;)</span><br><span class="line">  result.value = raw</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，ref函数就实现了。</p>
<p>不过vue3的ref不是这样实现的。</p>
<p>为了区分开<strong>基本类型</strong>和<strong>对象</strong>，方便框架后续的维护，vue3的ref采用了独立的实现，并不是使用<strong>Proxy</strong>，而是采用<strong>存取器属性</strong>做拦截。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">raw?:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> r = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">value</span>()&#123;</span><br><span class="line">      track(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> raw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newVal:any</span>)&#123;</span><br><span class="line">      raw = newVal</span><br><span class="line">      trigger(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="computed">computed</h3>
<p>说完ref，我们来说computed。</p>
<p>computed实际上是对effect的其中一种封装。将<strong>借助副作用实现自动计算</strong>这个概念写成一个函数，他就是<strong>computed</strong></p>
<blockquote>
<p><strong>computed函数</strong>期待接收一个<strong>计算函数:getter</strong></p>
<p><strong>getter</strong>会惰性地返回一个值，我们会创建一个响应式对象，将<strong>getter</strong>和<strong>响应式对象</strong>组合成我们的副作用，通过effect进行<strong>track</strong>。</p>
<p><strong>getter</strong>中出现的所有响应式对象，都会通过effect把这个副作用添加到它们各自的<code>dep</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = ref()</span><br><span class="line">  effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    result.value = getter()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整合3篇文章内容后的响应式代码">整合3篇文章内容后的响应式代码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> activeEffect:any = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!activeEffect)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">    <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">        targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">    <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">        depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    dep.add(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">    <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">    <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">        dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">            effect()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">            track(target,key)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> oldVal = target[key]</span><br><span class="line">            <span class="keyword">let</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">            <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">                trigger(target,key)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">eff:any</span>)</span>&#123;</span><br><span class="line">    activeEffect = eff</span><br><span class="line">    activeEffect()</span><br><span class="line">    activeEffect = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">raw?:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> r = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>()&#123;</span><br><span class="line">            track(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> raw</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newVal:any</span>)&#123;</span><br><span class="line">            raw = newVal</span><br><span class="line">            trigger(r,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = ref()</span><br><span class="line">    effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        result.value = getter()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">    <span class="attr">price</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">quantity</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> salePrice = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> product.price * <span class="number">0.9</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> total = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salePrice.value * product.quantity</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total.value,salePrice.value)<span class="comment">//5.4,1.8</span></span><br><span class="line">product.quantity = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(total.value,salePrice.value)<span class="comment">//7.2,1.8</span></span><br><span class="line">product.price = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(total.value,salePrice.value)<span class="comment">//10.8,2.7</span></span><br></pre></td></tr></table></figure>
<p>这些就是对vue3响应式原理比较简单的理解，实际上这些代码和vue3源码还是差距很大的，不过只要是能帮助我们学习响应式，这就是值得的。</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-route杂谈</title>
    <url>/2021/07/19/learnRouter/</url>
    <content><![CDATA[<h1>vue-router杂谈</h1>
<p>说到<code>vue-router</code>，我会有联系到下面几个对象：<code>router,routes,route</code>，还有下面几个属性：<code>path,component,name</code>，还有下面几个方法：<code>BeforeRouteUpdate()，BeforeRouteEnter()，BeforeRouteLeave()，router.beforeEach()</code></p>
<p><code>router</code>是一个路由器，他的功能是根据自身记录的路由表，完成路由和组件的映射，并通过<code>go(),replace(),push()</code>方法提供可编程的路由切换。</p>
<p><code>routes</code>是路由表，是一个路由对象数组，他将被登记在路由器中。</p>
<p><code>route</code>就是路由，路由表中的一个元素，是一个拥有地址path、路由参数params、查询串query、路由名name、组件component等信息的对象。根据这个路由对象，就能让地址栏中的地址path和组件component形成映射关系，路由名name和component形成映射关系。</p>
<span id="more"></span>
<h3 id="这些玩意怎么使用？">这些玩意怎么使用？</h3>
<p>地址栏输入地址后，router通过path查找路由表中的路由，确定path和component的映射关系，从而实现输入指定地址显示指定组件。而使用<code>router.push()</code>等方法切换路由时，router通过传入的参数name，确定name和component的映射关系，确定参数name对应的component完成路由切换。</p>
<p><code>BeforeRouteWhatTheFuck()</code>，根据文档的说法，这个玩意称作导航守卫。“导航”意为路由发生变化，“守卫”意为回调。</p>
<p>当参数或查询改变时，不会触发进入/离开的导航守卫，而会触发更新的导航守卫</p>
<p>所以，进入/离开守卫与更新守卫是互斥的。</p>
<p>当path的查询和参数被修改时，进入<code>BeforeRouteUpdate()</code></p>
<p>当查询和参数未被修改，或path被修改时，进入<code>BeforeRouteEnter()和BeforeRouteLeave()</code></p>
<h3 id="由此可见">由此可见</h3>
<p>路由变更有两种：<strong>路由修改</strong>和<strong>路由切换</strong></p>
<p>前者复用实例，后者销毁并创建新实例</p>
<blockquote>
<p>关于路由切换时，watch route无法触发这个问题，我的解释是这样的：组件实例被销毁，是对响应式对象的直接销毁，watch无法追踪。</p>
</blockquote>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>是时候学习vue3了</title>
    <url>/2021/07/15/learnVue3/</url>
    <content><![CDATA[<blockquote>
<p><strong>适用日期：2021-7</strong></p>
</blockquote>
<h1>一、使用vite新建Vue3应用</h1>
<blockquote>
<p>Vite requires Node.js version &gt;=12.0.0.</p>
</blockquote>
<h3 id="创建vue3项目">创建vue3项目</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn create @vitejs/app</span><br></pre></td></tr></table></figure>
<h3 id="进入vue3项目">进入vue3项目</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;项目名称&gt;</span><br></pre></td></tr></table></figure>
<h3 id="基本命令">基本命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install //安装依赖</span><br><span class="line">yarn dev //启动</span><br><span class="line">yarn run build //发行</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="其他问题：">其他问题：</h3>
<p>在执行<code>import App from './App.vue'</code>时，会提示<code>找不到模块“./App.vue”</code></p>
<p>解决办法是在项目目录(scr同级)下添加<code>vue-shims.d.ts</code>文件，内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>二、安装vue-router和vuex</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-router@next vuex@next</span><br></pre></td></tr></table></figure>
<p>在src目录下新建router/index.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, Router, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Hash&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@view/Login.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 路由模式</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="function"><span class="title">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>在src目录下新建store/index.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; InjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, Store &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface State &#123;</span><br><span class="line">  <span class="attr">count</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;State&gt;&gt; = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore&lt;State&gt;(&#123;</span><br><span class="line">  <span class="function"><span class="title">state</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state : State</span>)</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1>三、CSS预处理器</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader --dev</span><br></pre></td></tr></table></figure>
<h1>四、配置路径别名</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @types/node --dev</span><br></pre></td></tr></table></figure>
<p><code>vite.config.ts</code>配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">...</span><br><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">  <span class="attr">alias</span>:&#123;</span><br><span class="line">    <span class="string">&quot;@&quot;</span>:path.resolve(__dirname,<span class="string">&quot;./src&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>别名配置后，你会发现在import .ts后缀的文件时会有红色波浪线<br>
<code>An import path cannot end with a '.ts' extension.</code><br>
原来是<code>import ts</code>时，需要在<code>tsconfig.json</code>配置别名，此处配置的别名需在<code>vite.config.ts</code>中有相同别名对应存在，具体配置如下：<br>
<code>tsconfig.json</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@view/*&quot;</span>:[<span class="string">&quot;src/views/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@utils/*&quot;</span>:[<span class="string">&quot;src/utils/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@api/*&quot;</span>:[<span class="string">&quot;src/api/*&quot;</span>]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>vite.config.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">      <span class="attr">alias</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@css&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/assets/css&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@c&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/components&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@img&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/assets/img&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@style&quot;</span> : path.resolve(__dirname, <span class="string">&quot;./src/style&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@view&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/views&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@utils&quot;</span>:path.resolve(__dirname, <span class="string">&quot;./src/utils&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@api&quot;</span>:path.resolve(__dirname, <span class="string">&quot;./src/api&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h1>五、配置服务器</h1>
<p><code>vite.config.ts</code>配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">proxy</span>:&#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">        <span class="attr">target</span>:<span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="说明">说明</h3>
<p><code>target</code>是你需要代理的地址，比如你的请求地址是</p>
<blockquote>
<p><code>http://localhost:8080/product/list</code></p>
</blockquote>
<p>那么target里面应该这么写：</p>
<blockquote>
<p><code>target:'http://localhost:8080/'</code></p>
</blockquote>
<p>编写请求的地方：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProductList</span>(<span class="params">parameter</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;api/product/list&#x27;</span>,</span><br><span class="line">      <span class="attr">parameter</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述配置会将你的url去掉api然后拼接上target去请求服务器</p>
<h1>六、Vue3模板</h1>
<p>点击vscode左下角的齿轮，选择<code>User Snippets-&gt;New Global Snippets file</code><br>
复制下列模板代码进文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;!-- $0 --&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;script lang=&#x27;ts&#x27;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;import &#123; defineComponent, ref, reactive, toRefs, onBeforeMount, onMounted&#125; from &#x27;vue&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;interface DataProps &#123;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  name: &#x27;&#x27;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    setup() &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      console.log(&#x27;1-开始创建组件-setup&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      const data: DataProps = reactive(&#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      onBeforeMount(() =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        console.log(&#x27;2.组件挂载页面之前执行----onBeforeMount&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      onMounted(() =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        console.log(&#x27;3.-组件挂载到页面之后执行-------onMounted&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      const refData = toRefs(data);&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      return &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        ...refData,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;style lang=&#x27;less&#x27; scoped&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>七、配置env</h1>
<p>vite中的env配置，文档中有讲，这里从简总结。</p>
<p>首先在项目根目录（src同级）处新建<code>.env.production</code>和<code>.env.development</code>,然后用<code>key=value</code>的方式填写你需要使用的环境变量，换行区分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NODE_ENV=development</span><br></pre></td></tr></table></figure>
<p>在两个文件中分别配置<code>NODE_ENV='development'</code>和<code>NODE_ENV='production'</code>。vite会根据你使用<code>package.json</code>中的哪个script，来确定项目的启动方式MODE，然后通过MODE选择加载对应<code>.env.[mode]</code>文件的环境变量。让我们可以通过全局变量<code>import.meta.env.MODE</code>获取当前项目的MODE</p>
<p>我们通常不会把配置变量写在<code>.env.[mode]</code>文件中，而是在<code>src</code>新建<code>config</code>文件夹，里面创建<code>index.ts</code>存储变量，后面再使用<code>import.meta.env.MODE</code>导出对应的配置变量对象。</p>
<h1>八、配置axios</h1>
<p>网传ts配置axios有两种方式</p>
<h4 id="第一种">第一种</h4>
<p>建一个<code>axios.ts</code>放在<code>utils</code>文件夹，在其中创建axios实例，配置拦截器，然后直接export出一个axios实例。这种方式的配置，可以直接在<code>api.ts</code>中导入实例直接使用。</p>
<h4 id="第二种">第二种</h4>
<p>也是建一个<code>axios.ts</code>放在<code>utils</code>文件夹，不同的是export出的并不是一个axios实例，而是一个带init方法的axios自定义类。</p>
<p>这里介绍第一种：<br>
<code>utils</code>文件夹的<code>axios.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>[ axios 请求封装]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// import store from &quot;@/store&quot;;</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosResponse, AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/reactivity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// 根据环境不同引入不同api地址</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&quot;@/config&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: config.baseApi, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span> <span class="comment">// send cookies when cross-domain requests</span></span><br><span class="line">  <span class="comment">// headers: &#123;</span></span><br><span class="line">  <span class="comment">//  // clear cors</span></span><br><span class="line">  <span class="comment">//  &#x27;Cache-Control&#x27;: &#x27;no-cache&#x27;,</span></span><br><span class="line">  <span class="comment">//  Pragma: &#x27;no-cache&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Request interceptors</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 加载动画</span></span><br><span class="line">    <span class="keyword">if</span> (config.loading) &#123;</span><br><span class="line">      <span class="comment">// Toast.loading(&#123;</span></span><br><span class="line">      <span class="comment">//   message: &quot;加载中...&quot;,</span></span><br><span class="line">      <span class="comment">//   forbidClick: true</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在此处添加请求头等，如添加 token</span></span><br><span class="line">    <span class="comment">// if (store.state.token) &#123;</span></span><br><span class="line">    <span class="comment">// config.headers[&#x27;Authorization&#x27;] = `Bearer $&#123;store.state.token&#125;`</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// Response interceptors</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="keyword">async</span> (response: AxiosResponse) =&gt; &#123;</span><br><span class="line">    <span class="comment">// await new Promise(resovle =&gt; setTimeout(resovle, 3000))</span></span><br><span class="line">    <span class="comment">// Toast.clear();</span></span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// token 过期</span></span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">401</span>)&#123;</span><br><span class="line">        ElMessage(res.message)</span><br><span class="line">        <span class="comment">// 警告提示窗</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (res.code == <span class="number">403</span>) &#123;</span><br><span class="line">        ElMessage(res.message)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 若后台返回错误值，此处返回对应错误对象，下面 error 就会接收</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.msg || <span class="string">&quot;Error&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意返回值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Toast.clear();</span></span><br><span class="line">    <span class="keyword">if</span> (error &amp;&amp; error.response) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求错误(400)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          error.message = <span class="string">&quot;未授权,请登录(401)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          error.message = <span class="string">&quot;拒绝访问(403)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">          error.message = <span class="string">`请求地址出错: <span class="subst">$&#123;error.response.config.url&#125;</span>`</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">405</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求方法未允许(405)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求超时(408)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务器内部错误(500)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务未实现(501)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">          error.message = <span class="string">&quot;网络错误(502)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务不可用(503)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">          error.message = <span class="string">&quot;网络超时(504)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">          error.message = <span class="string">&quot;HTTP版本不受支持(505)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          error.message = <span class="string">`连接错误: <span class="subst">$&#123;error.message&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error.message == <span class="string">&quot;Network Error&quot;</span>) &#123;  </span><br><span class="line">        error.message = <span class="string">&quot;网络异常，请检查后重试！连接到服务器失败，请联系管理员&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ElMessage(error.message)</span><br><span class="line">    <span class="comment">// store.auth.clearAuth()</span></span><br><span class="line">    <span class="comment">// store.dispatch(&quot;clearAuth&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config:AxiosRequestConfig</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = reactive(&#123;&#125;)</span><br><span class="line">  service(config).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(result,response.data)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; service, request &#125;</span><br></pre></td></tr></table></figure>
<p>在api文件中使用配置好的axios<br>
<code>api</code>文件夹的<code>article.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/axios&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">article</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/author&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">commentList</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/commentList&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里还导出了一个request函数，因为vue3有reactive，即使异步请求之前返回了空的result，后续回调依然可以给这个已经返回的result赋值。这样我们就可以在component中这样获取值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">    <span class="attr">article</span>:article(&#123;&#125;),</span><br><span class="line">    <span class="attr">author</span>:author(&#123;&#125;),</span><br><span class="line">    <span class="attr">commentList</span>:commentList(&#123;&#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> refData = toRefs(data);</span><br><span class="line">  <span class="keyword">return</span> &#123; ...refData &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>九、配置mock</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mockjs</span><br><span class="line">yarn add vite-plugin-mock -D</span><br></pre></td></tr></table></figure>
<p>新建mock目录(src同级)，在mock目录中新建test.ts作为mock数据文件<br>
<code>mock/test.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MockMethod &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="attr">category</span>:<span class="string">&#x27;人文&#x27;</span>,</span><br><span class="line">          <span class="attr">body</span>:<span class="string">&#x27;halo&#x27;</span>,</span><br><span class="line">          <span class="attr">recommendCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">againstCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">pre</span>:<span class="string">&#x27;NOR Flash驱动程序&#x27;</span>,</span><br><span class="line">          <span class="attr">next</span>:<span class="string">&#x27;移植DM900C网卡驱动&#x27;</span>,</span><br><span class="line">          <span class="attr">commentCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">visitCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/author&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;quinoa&#x27;</span>,</span><br><span class="line">          <span class="attr">followCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">fansCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">] <span class="keyword">as</span> MockMethod[]</span><br></pre></td></tr></table></figure>
<p>在<code>utils</code>目录新建<code>mockProdServer.ts</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  mockProdServer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProdMockServer &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock/es/createProdMockServer&#x27;</span>;</span><br><span class="line"><span class="comment">// 逐一导入您的mock.ts文件</span></span><br><span class="line"><span class="comment">// 如果使用vite.mock.config.ts，只需直接导入文件</span></span><br><span class="line"><span class="comment">// 可以使用 import.meta.glob功能来进行全部导入</span></span><br><span class="line"><span class="keyword">import</span> testModule <span class="keyword">from</span> <span class="string">&#x27;mock/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setupProdMockServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createProdMockServer([...testModule]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>vite.config.ts</code>中配置<code>vite-plugin-mock</code><br>
<code>vite.config.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  vue(),</span><br><span class="line">  viteMockServe(&#123;</span><br><span class="line">    <span class="attr">mockPath</span>:<span class="string">&#x27;./mock&#x27;</span>,</span><br><span class="line">    <span class="attr">supportTs</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">watchFiles</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">localEnabled</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">prodEnabled</span>:command !==<span class="string">&#x27;serve&#x27;</span> &amp;&amp; prodMock,</span><br><span class="line">    <span class="comment">// 这样可以控制关闭mock的时候不让mock打包到最终代码</span></span><br><span class="line">    <span class="attr">injectCode</span>:<span class="string">`</span></span><br><span class="line"><span class="string">      import &#123; setupProdMockServer &#125; from &#x27;@utils/mockProdServer&#x27;;</span></span><br><span class="line"><span class="string">      setupProdMockServer();</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在vite.config.ts中关闭代理服务器，就可以使用ts文件模拟的mock数据了。</p>
<p>需要注意的是如果启动项目时出错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span>:<span class="number">30</span>:<span class="number">31</span> ├F10: AM┤ [vite:mock] mock reload error <span class="built_in">Error</span> [ERR_STREAM_DESTROYED]: Cannot call write after a stream was destroyed</span><br><span class="line">events.js:<span class="number">292</span></span><br><span class="line">    <span class="keyword">throw</span> er; <span class="comment">// Unhandled &#x27;error&#x27; event</span></span><br></pre></td></tr></table></figure>
<p>这是目前可能会遇到的<code>esbuild</code>的bug（2021-4至2021-7），在当前blog项目中使用如下命令可解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node ./node_modules/esbuild/install.js</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
</search>
