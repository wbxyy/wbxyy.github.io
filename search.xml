<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>first</tag>
      </tags>
  </entry>
  <entry>
    <title>learnReactivity2</title>
    <url>/2021/07/19/learnReactivity2/</url>
    <content><![CDATA[<h1 id="浅谈vue3响应式原理-第二篇"><a href="#浅谈vue3响应式原理-第二篇" class="headerlink" title="浅谈vue3响应式原理(第二篇)"></a>浅谈vue3响应式原理(第二篇)</h1><p>上一篇简单讲了一下什么是响应式，实现响应式的基本套路：在变量被设置新值的时候，重新执行一次副作用</p>
<p>但是副作用有很多，我们不可能把每个副作用的执行都在Proxy中硬编码一遍，如何设计才能管理这么多副作用，这次来讲vue3实现响应式需要的数据结构。</p>
<h3 id="副作用的存储"><a href="#副作用的存储" class="headerlink" title="副作用的存储"></a>副作用的存储</h3><p>要完成响应式，我们上一篇讲了在变量执行set操作时将副作用重放一遍。但是一个程序有这么多变量，这么多副作用，vue3是如何管理的呢？</p>
<p>首先这里引入一个新名词: <strong>depsMap</strong></p>
<p>depsMap是一个绑定属性与副作用的结构，他是一个Map。他的key是变量的属性名，他的value是这些属性所绑定的副作用。</p>
<p>一个属性当然不止一个副作用，因此value是一个Set结构，用来存储多个副作用。</p>
<p>我们把这个存储副作用的结构叫做：<strong>dep</strong></p>
<p>dep是sideEffect的集合。</p>
<p>这样一来，我们就能管理整个对象的副作用了。</p>
<h3 id="record和playback"><a href="#record和playback" class="headerlink" title="record和playback"></a>record和playback</h3><p>有了上面的结构，我们把上一篇的响应式代码魔改一下，新增了一个方法：<strong>track</strong></p>
<p>track的作用是用来存储副作用，trigger的作用是用来重放副作用。</p>
<p>一个record，一个playback，形成了我们响应式的核心。</p>
<p>下面代码中通过track一步一步构造出depsMap和dep，将副作用存储起来，并构建与属性的对应关系。</p>
<p>后面再通过trigger重放，用属性找到副作用的集合，然后全部重放一遍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">track(<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">p.quantity = <span class="number">3</span></span><br><span class="line">trigger(<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>

<h3 id="管理多个对象"><a href="#管理多个对象" class="headerlink" title="管理多个对象"></a>管理多个对象</h3><p>变量有了，副作用有了，这么多对象我们怎么管理，那当然是再弄一个Map</p>
<p>引入新名词：<strong>targetMap</strong></p>
<p>targetMap是绑定对象和depsMap的结构。他的key是对象，而value是depsMap</p>
<p>这么一来，所有的对象都记录在targetMap，每个对象都有自己的depsMap，每个depsMap都记录着对象的每个属性应该有哪些副作用。</p>
<p>加入targetMap之后，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">track(p,<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">p.quantity = <span class="number">3</span></span><br><span class="line">trigger(p,<span class="string">&#x27;quantity&#x27;</span>)</span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>

<h3 id="结合Proxy拦截实现自动track和trigger"><a href="#结合Proxy拦截实现自动track和trigger" class="headerlink" title="结合Proxy拦截实现自动track和trigger"></a>结合Proxy拦截实现自动track和trigger</h3><p>以上面的代码为基础，我们再结合proxy实现“自动”，此时封装出<strong>reactive</strong>函数</p>
<p><strong>reactive</strong>的作用是通过Proxy构造拦截器，把track和trigger两个方法放在get,set拦截器中调用。</p>
<p>因为执行effect时，会执行属性的读取，因此触发track将对象添加到targetMap，然后构建关联的depsMap，再构建dep存储当前effect</p>
<p>后来为属性设置新值时，就会触发trigger将对应的副作用执行一遍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(effect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">      track(target,key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> oldVal = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">        trigger(target,key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;</span><br><span class="line">effect()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>

<h3 id="限制track的执行"><a href="#限制track的执行" class="headerlink" title="限制track的执行"></a>限制track的执行</h3><p>我们发现，程序中读取属性是非常普遍的操作，甚至在副作用中也会读取属性。这样很容易形成一个闭环：trigger-&gt;track-&gt;trigger-&gt;track-&gt;…..</p>
<p>原因是执行trigger时，我们是在一个forEach循环里，而track的作用是往Set中添加副作用，这样导致了执行effect，然后添加effect,再执行刚刚添加的effect，再添加effect，最后递归下去没有出口。</p>
<p>我们下面添加一个控制变量<strong>activeEffect</strong>，让我们的track只在首次执行副作用时才被调用.</p>
<p>为此，我们重写了effect方法，effect不再是副作用，而是一个传入副作用的函数，里面不仅管理了activeEffect的状态，还调用了副作用本身。</p>
<p>我们还修改了track方法，当activeEffect有值时，才会往下执行,并且最后dep添加的是activeEffect</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> activeEffect:any = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!activeEffect)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    targetMap.set(target,(depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.set(key,(dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.add(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target:any,key:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span>(dep)&#123;</span><br><span class="line">    dep.forEach(<span class="function">(<span class="params">effect:any</span>)=&gt;</span>&#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target:any</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler:any = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target:any,key:string,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">      track(target,key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> oldVal = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(result &amp;&amp; oldVal !== value)&#123;</span><br><span class="line">        trigger(target,key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">eff:any</span>)</span>&#123;</span><br><span class="line">  activeEffect = eff</span><br><span class="line">  activeEffect()</span><br><span class="line">  activeEffect = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = reactive(p)</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>浅谈vue3响应式原理</title>
    <url>/2021/07/19/learnReactivity1/</url>
    <content><![CDATA[<h1 id="浅谈vue3响应式原理-第一篇"><a href="#浅谈vue3响应式原理-第一篇" class="headerlink" title="浅谈vue3响应式原理(第一篇)"></a>浅谈vue3响应式原理(第一篇)</h1><p>1年前，在开课吧的视频里看到winter、大圣还有尤大吹嘘着vue3，各种新名词映入眼帘：watchEffect，reactive，ref，当时觉得好牛逼啊，一定要学一下（咕咕咕）。<br>1年后，watchEffect是啥，reactive是啥，怎么多了出了这么多东西，好难啊，眼看着那个视频上的时间已经过去一年了，自己却完全没有长进，这次一定要摸进去。</p>
<h3 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h3><p>我们经常能在尤大口中听到一个词：sideEffect。首次听这个词时，我也是一头雾水，副作用到底是什么，吃药时的副作用吗？在尤大在评论winter的小案例时，他讲了winter在组件销毁时没有清理掉之前设置的事件监听器，这会对程序产生副作用。当然，尤大此时说的是sideEffect是另一个方面的。</p>
<p>vue3中的sideEffect怎么理解？一些变量执行某些基本操作时，被拦截并执行一些事情，这些事情叫sideEffect。</p>
<h3 id="拦截"><a href="#拦截" class="headerlink" title="拦截"></a>拦截</h3><p>上面说到拦截，这是vue经常做的事情。vue就喜欢在变量读取、写入的时候拦截并做操作。</p>
<p>在vue2中，尤大是通过Object.defineProperty给变量设置存取器属性，然后在存取器中执行副作用。到了vue3，尤大用了es6的新特性Proxy和Reflect重写了这部分的代码。Proxy提供了对变量基本操作的各种拦截回调，Reflect则是对这些基本操作的实现。通过Proxy，将变量的<strong>基本操作</strong>修改为<strong>副作用+基本操作</strong>，完成副作用的执行。</p>
<h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><h4 id="响应式是什么"><a href="#响应式是什么" class="headerlink" title="响应式是什么"></a>响应式是什么</h4><p>要明白响应式是什么，我们通过下面几行代码讲解</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> product = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">total = product.price * product.quantity <span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total <span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<p>上面代码表明了total是由price和quantity计算得出，但是当我们修改了quantity后，total的值却没有跟着变，因此我们知道原生的javascript是没有响应式的</p>
<h4 id="那么要怎么实现响应式"><a href="#那么要怎么实现响应式" class="headerlink" title="那么要怎么实现响应式"></a>那么要怎么实现响应式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> product = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = product.price * product.quantity</span><br><span class="line">&#125;</span><br><span class="line">trigger()</span><br><span class="line">total <span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">trigger()</span><br><span class="line">total <span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>我们发现，如果我们将total的计算方式保存为一个函数，然后在每次更新quantity之后调用一次，total的值就会跟着变化。</p>
<p>那么只要我们在quantity更新时自动执行trigger，响应式就实现了。</p>
<h4 id="自动？"><a href="#自动？" class="headerlink" title="自动？"></a>自动？</h4><p>要实现自动，我们就需要前面讲到的知识：<strong>拦截</strong>。</p>
<p>我们通过proxy，在quantity执行set操作时进行拦截，然后将上述trigger添加为set操作的副作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">price</span>:<span class="number">10</span>,</span><br><span class="line">  <span class="attr">quantity</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  total = p.price * p.quantity</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> product = <span class="keyword">new</span> <span class="built_in">Proxy</span>(p,&#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target:any,key:string,value:any,receiver:any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">    trigger()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">trigger()</span><br><span class="line">total<span class="comment">//20</span></span><br><span class="line">product.quantity = <span class="number">3</span></span><br><span class="line">total<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>这下我们可以在set操作时自动执行trigger了</p>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-route杂谈</title>
    <url>/2021/07/19/learnRouter/</url>
    <content><![CDATA[<h1 id="vue-router杂谈"><a href="#vue-router杂谈" class="headerlink" title="vue-router杂谈"></a>vue-router杂谈</h1><p>说到<code>vue-router</code>，我会有联系到下面几个对象：<code>router,routes,route</code>，还有下面几个属性：<code>path,component,name</code>，还有下面几个方法：<code>BeforeRouteUpdate()，BeforeRouteEnter()，BeforeRouteLeave()，router.beforeEach()</code></p>
<p><code>router</code>是一个路由器，他的功能是根据自身记录的路由表，完成路由和组件的映射，并通过<code>go(),replace(),push()</code>方法提供可编程的路由切换。</p>
<p><code>routes</code>是路由表，是一个路由对象数组，他将被登记在路由器中。</p>
<p><code>route</code>就是路由，路由表中的一个元素，是一个拥有地址path、路由参数params、查询串query、路由名name、组件component等信息的对象。根据这个路由对象，就能让地址栏中的地址path和组件component形成映射关系，路由名name和component形成映射关系。</p>
<h3 id="这些玩意怎么使用？"><a href="#这些玩意怎么使用？" class="headerlink" title="这些玩意怎么使用？"></a>这些玩意怎么使用？</h3><p>地址栏输入地址后，router通过path查找路由表中的路由，确定path和component的映射关系，从而实现输入指定地址显示指定组件。而使用<code>router.push()</code>等方法切换路由时，router通过传入的参数name，确定name和component的映射关系，确定参数name对应的component完成路由切换。</p>
<p><code>BeforeRouteWhatTheFuck()</code>，根据文档的说法，这个玩意称作导航守卫。“导航”意为路由发生变化，“守卫”意为回调。</p>
<p>当参数或查询改变时，不会触发进入/离开的导航守卫，而会触发更新的导航守卫</p>
<p>所以，进入/离开守卫与更新守卫是互斥的。</p>
<p>当path的查询和参数被修改时，进入<code>BeforeRouteUpdate()</code></p>
<p>当查询和参数未被修改，或path被修改时，进入<code>BeforeRouteEnter()和BeforeRouteLeave()</code></p>
<h3 id="由此可见"><a href="#由此可见" class="headerlink" title="由此可见"></a>由此可见</h3><p>路由变更有两种：<strong>路由修改</strong>和<strong>路由切换</strong></p>
<p>前者复用实例，后者销毁并创建新实例</p>
<blockquote>
<p>关于路由切换时，watch route无法触发这个问题，我的解释是这样的：组件实例被销毁，是对响应式对象的直接销毁，watch无法追踪。 </p>
</blockquote>
]]></content>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>paper</title>
    <url>/2021/07/16/paper/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>是时候学习vue3了</title>
    <url>/2021/07/15/learnVue3/</url>
    <content><![CDATA[<blockquote>
<p><strong>适用日期：2021-7</strong></p>
</blockquote>
<h1 id="一、使用vite新建Vue3应用"><a href="#一、使用vite新建Vue3应用" class="headerlink" title="一、使用vite新建Vue3应用"></a>一、使用vite新建Vue3应用</h1><blockquote>
<p>Vite requires Node.js version &gt;=12.0.0.</p>
</blockquote>
<h3 id="创建vue3项目"><a href="#创建vue3项目" class="headerlink" title="创建vue3项目"></a>创建vue3项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn create @vitejs/app</span><br></pre></td></tr></table></figure>

<h3 id="进入vue3项目"><a href="#进入vue3项目" class="headerlink" title="进入vue3项目"></a>进入vue3项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;项目名称&gt;</span><br></pre></td></tr></table></figure>

<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install //安装依赖</span><br><span class="line">yarn dev //启动</span><br><span class="line">yarn run build //发行</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="其他问题："><a href="#其他问题：" class="headerlink" title="其他问题："></a>其他问题：</h3><p>在执行<code>import App from &#39;./App.vue&#39;</code>时，会提示<code>找不到模块“./App.vue”</code></p>
<p>解决办法是在项目目录(scr同级)下添加<code>vue-shims.d.ts</code>文件，内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、安装vue-router和vuex"><a href="#二、安装vue-router和vuex" class="headerlink" title="二、安装vue-router和vuex"></a>二、安装vue-router和vuex</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-router@next vuex@next</span><br></pre></td></tr></table></figure>

<p>在src目录下新建router/index.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, Router, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Hash&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@view/Login.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 路由模式</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="function"><span class="title">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>在src目录下新建store/index.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; InjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, Store &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface State &#123;</span><br><span class="line">  <span class="attr">count</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;State&gt;&gt; = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore&lt;State&gt;(&#123;</span><br><span class="line">  <span class="function"><span class="title">state</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state : State</span>)</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="三、CSS预处理器"><a href="#三、CSS预处理器" class="headerlink" title="三、CSS预处理器"></a>三、CSS预处理器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader --dev</span><br></pre></td></tr></table></figure>

<h1 id="四、配置路径别名"><a href="#四、配置路径别名" class="headerlink" title="四、配置路径别名"></a>四、配置路径别名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @types/node --dev</span><br></pre></td></tr></table></figure>

<p><code>vite.config.ts</code>配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">...</span><br><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">  <span class="attr">alias</span>:&#123;</span><br><span class="line">    <span class="string">&quot;@&quot;</span>:path.resolve(__dirname,<span class="string">&quot;./src&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>别名配置后，你会发现在import .ts后缀的文件时会有红色波浪线<br><code>An import path cannot end with a &#39;.ts&#39; extension.</code><br>原来是<code>import ts</code>时，需要在<code>tsconfig.json</code>配置别名，此处配置的别名需在<code>vite.config.ts</code>中有相同别名对应存在，具体配置如下：<br><code>tsconfig.json</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@view/*&quot;</span>:[<span class="string">&quot;src/views/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@utils/*&quot;</span>:[<span class="string">&quot;src/utils/*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;@api/*&quot;</span>:[<span class="string">&quot;src/api/*&quot;</span>]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>vite.config.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">      <span class="attr">alias</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@css&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/assets/css&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@c&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/components&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@img&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/assets/img&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@style&quot;</span> : path.resolve(__dirname, <span class="string">&quot;./src/style&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@view&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/views&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@utils&quot;</span>:path.resolve(__dirname, <span class="string">&quot;./src/utils&quot;</span>),</span><br><span class="line">        <span class="string">&quot;@api&quot;</span>:path.resolve(__dirname, <span class="string">&quot;./src/api&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h1 id="五、配置服务器"><a href="#五、配置服务器" class="headerlink" title="五、配置服务器"></a>五、配置服务器</h1><p><code>vite.config.ts</code>配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">proxy</span>:&#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">        <span class="attr">target</span>:<span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>target</code>是你需要代理的地址，比如你的请求地址是</p>
<blockquote>
<p><code>http://localhost:8080/product/list</code></p>
</blockquote>
<p>那么target里面应该这么写：</p>
<blockquote>
<p><code>target:&#39;http://localhost:8080/&#39;</code></p>
</blockquote>
<p>编写请求的地方：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProductList</span>(<span class="params">parameter</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;api/product/list&#x27;</span>,</span><br><span class="line">      <span class="attr">parameter</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述配置会将你的url去掉api然后拼接上target去请求服务器</p>
<h1 id="六、Vue3模板"><a href="#六、Vue3模板" class="headerlink" title="六、Vue3模板"></a>六、Vue3模板</h1><p>点击vscode左下角的齿轮，选择<code>User Snippets-&gt;New Global Snippets file</code><br>复制下列模板代码进文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;!-- $0 --&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;script lang=&#x27;ts&#x27;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;import &#123; defineComponent, ref, reactive, toRefs, onBeforeMount, onMounted&#125; from &#x27;vue&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;interface DataProps &#123;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  name: &#x27;&#x27;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    setup() &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      console.log(&#x27;1-开始创建组件-setup&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      const data: DataProps = reactive(&#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      onBeforeMount(() =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        console.log(&#x27;2.组件挂载页面之前执行----onBeforeMount&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      onMounted(() =&gt; &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        console.log(&#x27;3.-组件挂载到页面之后执行-------onMounted&#x27;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      const refData = toRefs(data);&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      return &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;        ...refData,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;      &#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;style lang=&#x27;less&#x27; scoped&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、配置env"><a href="#七、配置env" class="headerlink" title="七、配置env"></a>七、配置env</h1><p>vite中的env配置，文档中有讲，这里从简总结。</p>
<p>首先在项目根目录（src同级）处新建<code>.env.production</code>和<code>.env.development</code>,然后用<code>key=value</code>的方式填写你需要使用的环境变量，换行区分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NODE_ENV=development</span><br></pre></td></tr></table></figure>

<p>在两个文件中分别配置<code>NODE_ENV=&#39;development&#39;</code>和<code>NODE_ENV=&#39;production&#39;</code>。vite会根据你使用<code>package.json</code>中的哪个script，来确定项目的启动方式MODE，然后通过MODE选择加载对应<code>.env.[mode]</code>文件的环境变量。让我们可以通过全局变量<code>import.meta.env.MODE</code>获取当前项目的MODE</p>
<p>我们通常不会把配置变量写在<code>.env.[mode]</code>文件中，而是在<code>src</code>新建<code>config</code>文件夹，里面创建<code>index.ts</code>存储变量，后面再使用<code>import.meta.env.MODE</code>导出对应的配置变量对象。</p>
<h1 id="八、配置axios"><a href="#八、配置axios" class="headerlink" title="八、配置axios"></a>八、配置axios</h1><p>网传ts配置axios有两种方式</p>
<h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>建一个<code>axios.ts</code>放在<code>utils</code>文件夹，在其中创建axios实例，配置拦截器，然后直接export出一个axios实例。这种方式的配置，可以直接在<code>api.ts</code>中导入实例直接使用。</p>
<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>也是建一个<code>axios.ts</code>放在<code>utils</code>文件夹，不同的是export出的并不是一个axios实例，而是一个带init方法的axios自定义类。</p>
<p>这里介绍第一种：<br><code>utils</code>文件夹的<code>axios.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>[ axios 请求封装]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// import store from &quot;@/store&quot;;</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosResponse, AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/reactivity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// 根据环境不同引入不同api地址</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&quot;@/config&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: config.baseApi, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span> <span class="comment">// send cookies when cross-domain requests</span></span><br><span class="line">  <span class="comment">// headers: &#123;</span></span><br><span class="line">  <span class="comment">//  // clear cors</span></span><br><span class="line">  <span class="comment">//  &#x27;Cache-Control&#x27;: &#x27;no-cache&#x27;,</span></span><br><span class="line">  <span class="comment">//  Pragma: &#x27;no-cache&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Request interceptors</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 加载动画</span></span><br><span class="line">    <span class="keyword">if</span> (config.loading) &#123;</span><br><span class="line">      <span class="comment">// Toast.loading(&#123;</span></span><br><span class="line">      <span class="comment">//   message: &quot;加载中...&quot;,</span></span><br><span class="line">      <span class="comment">//   forbidClick: true</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在此处添加请求头等，如添加 token</span></span><br><span class="line">    <span class="comment">// if (store.state.token) &#123;</span></span><br><span class="line">    <span class="comment">// config.headers[&#x27;Authorization&#x27;] = `Bearer $&#123;store.state.token&#125;`</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// Response interceptors</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="keyword">async</span> (response: AxiosResponse) =&gt; &#123;</span><br><span class="line">    <span class="comment">// await new Promise(resovle =&gt; setTimeout(resovle, 3000))</span></span><br><span class="line">    <span class="comment">// Toast.clear();</span></span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// token 过期</span></span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">401</span>)&#123;</span><br><span class="line">        ElMessage(res.message)</span><br><span class="line">        <span class="comment">// 警告提示窗</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (res.code == <span class="number">403</span>) &#123;</span><br><span class="line">        ElMessage(res.message)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 若后台返回错误值，此处返回对应错误对象，下面 error 就会接收</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.msg || <span class="string">&quot;Error&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意返回值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Toast.clear();</span></span><br><span class="line">    <span class="keyword">if</span> (error &amp;&amp; error.response) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求错误(400)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          error.message = <span class="string">&quot;未授权,请登录(401)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          error.message = <span class="string">&quot;拒绝访问(403)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">          error.message = <span class="string">`请求地址出错: <span class="subst">$&#123;error.response.config.url&#125;</span>`</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">405</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求方法未允许(405)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">          error.message = <span class="string">&quot;请求超时(408)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务器内部错误(500)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务未实现(501)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">          error.message = <span class="string">&quot;网络错误(502)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">          error.message = <span class="string">&quot;服务不可用(503)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">          error.message = <span class="string">&quot;网络超时(504)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">          error.message = <span class="string">&quot;HTTP版本不受支持(505)&quot;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          error.message = <span class="string">`连接错误: <span class="subst">$&#123;error.message&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error.message == <span class="string">&quot;Network Error&quot;</span>) &#123;  </span><br><span class="line">        error.message = <span class="string">&quot;网络异常，请检查后重试！连接到服务器失败，请联系管理员&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ElMessage(error.message)</span><br><span class="line">    <span class="comment">// store.auth.clearAuth()</span></span><br><span class="line">    <span class="comment">// store.dispatch(&quot;clearAuth&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config:AxiosRequestConfig</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = reactive(&#123;&#125;)</span><br><span class="line">  service(config).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(result,response.data)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; service, request &#125;</span><br></pre></td></tr></table></figure>

<p>在api文件中使用配置好的axios<br><code>api</code>文件夹的<code>article.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/axios&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">article</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/author&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">commentList</span> (<span class="params">parameter: any</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/commentList&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:parameter</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里还导出了一个request函数，因为vue3有reactive，即使异步请求之前返回了空的result，后续回调依然可以给这个已经返回的result赋值。这样我们就可以在component中这样获取值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">    <span class="attr">article</span>:article(&#123;&#125;),</span><br><span class="line">    <span class="attr">author</span>:author(&#123;&#125;),</span><br><span class="line">    <span class="attr">commentList</span>:commentList(&#123;&#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> refData = toRefs(data);</span><br><span class="line">  <span class="keyword">return</span> &#123; ...refData &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="九、配置mock"><a href="#九、配置mock" class="headerlink" title="九、配置mock"></a>九、配置mock</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mockjs</span><br><span class="line">yarn add vite-plugin-mock -D</span><br></pre></td></tr></table></figure>
<p>新建mock目录(src同级)，在mock目录中新建test.ts作为mock数据文件<br><code>mock/test.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MockMethod &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="attr">category</span>:<span class="string">&#x27;人文&#x27;</span>,</span><br><span class="line">          <span class="attr">body</span>:<span class="string">&#x27;halo&#x27;</span>,</span><br><span class="line">          <span class="attr">recommendCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">againstCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">pre</span>:<span class="string">&#x27;NOR Flash驱动程序&#x27;</span>,</span><br><span class="line">          <span class="attr">next</span>:<span class="string">&#x27;移植DM900C网卡驱动&#x27;</span>,</span><br><span class="line">          <span class="attr">commentCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">visitCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api/article/author&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>:<span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;quinoa&#x27;</span>,</span><br><span class="line">          <span class="attr">followCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">          <span class="attr">fansCount</span>:(<span class="built_in">Math</span>.random()*<span class="number">100</span>).toFixed(<span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">] <span class="keyword">as</span> MockMethod[]</span><br></pre></td></tr></table></figure>

<p>在<code>utils</code>目录新建<code>mockProdServer.ts</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  mockProdServer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProdMockServer &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock/es/createProdMockServer&#x27;</span>;</span><br><span class="line"><span class="comment">// 逐一导入您的mock.ts文件</span></span><br><span class="line"><span class="comment">// 如果使用vite.mock.config.ts，只需直接导入文件</span></span><br><span class="line"><span class="comment">// 可以使用 import.meta.glob功能来进行全部导入</span></span><br><span class="line"><span class="keyword">import</span> testModule <span class="keyword">from</span> <span class="string">&#x27;mock/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setupProdMockServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createProdMockServer([...testModule]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>vite.config.ts</code>中配置<code>vite-plugin-mock</code><br><code>vite.config.ts</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  vue(),</span><br><span class="line">  viteMockServe(&#123;</span><br><span class="line">    <span class="attr">mockPath</span>:<span class="string">&#x27;./mock&#x27;</span>,</span><br><span class="line">    <span class="attr">supportTs</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">watchFiles</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">localEnabled</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">prodEnabled</span>:command !==<span class="string">&#x27;serve&#x27;</span> &amp;&amp; prodMock,</span><br><span class="line">    <span class="comment">// 这样可以控制关闭mock的时候不让mock打包到最终代码</span></span><br><span class="line">    <span class="attr">injectCode</span>:<span class="string">`</span></span><br><span class="line"><span class="string">      import &#123; setupProdMockServer &#125; from &#x27;@utils/mockProdServer&#x27;;</span></span><br><span class="line"><span class="string">      setupProdMockServer();</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在vite.config.ts中关闭代理服务器，就可以使用ts文件模拟的mock数据了。</p>
<p>需要注意的是如果启动项目时出错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span>:<span class="number">30</span>:<span class="number">31</span> ├F10: AM┤ [vite:mock] mock reload error <span class="built_in">Error</span> [ERR_STREAM_DESTROYED]: Cannot call write after a stream was destroyed</span><br><span class="line">events.js:<span class="number">292</span></span><br><span class="line">    <span class="keyword">throw</span> er; <span class="comment">// Unhandled &#x27;error&#x27; event</span></span><br></pre></td></tr></table></figure>

<p>这是目前可能会遇到的<code>esbuild</code>的bug（2021-4至2021-7），在当前blog项目中使用如下命令可解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node ./node_modules/esbuild/install.js</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
</search>
